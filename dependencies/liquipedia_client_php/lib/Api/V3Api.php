<?php
/**
 * V3Api
 * PHP version 7.4
 *
 * @category Class
 * @package  Liquipedia\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * LiquipediaDB API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Liquipedia\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Liquipedia\Client\ApiException;
use Liquipedia\Client\Configuration;
use Liquipedia\Client\HeaderSelector;
use Liquipedia\Client\ObjectSerializer;

/**
 * V3Api Class Doc Comment
 *
 * @category Class
 * @package  Liquipedia\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class V3Api
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'broadcastersGet' => [
            'application/json',
        ],
        'companyGet' => [
            'application/json',
        ],
        'datapointGet' => [
            'application/json',
        ],
        'externalmedialinkGet' => [
            'application/json',
        ],
        'matchGet' => [
            'application/json',
        ],
        'placementGet' => [
            'application/json',
        ],
        'playerGet' => [
            'application/json',
        ],
        'seriesGet' => [
            'application/json',
        ],
        'squadplayerGet' => [
            'application/json',
        ],
        'standingsentryGet' => [
            'application/json',
        ],
        'standingstableGet' => [
            'application/json',
        ],
        'teamGet' => [
            'application/json',
        ],
        'teamtemplateGet' => [
            'application/json',
        ],
        'teamtemplatelistGet' => [
            'application/json',
        ],
        'tournamentGet' => [
            'application/json',
        ],
        'transferGet' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation broadcastersGet
     *
     * Get broadcasters
     *
     * @param  string $wiki The wikis you want data from. Pipe-separate multiple wikis for multiwiki requests.  **Example:** &#x60;dota2&#x60;, &#x60;dota2|counterstrike&#x60; (required)
     * @param  string $conditions The filters you want to apply to the request.  **Example:** &#x60;[[pagename::Some/Liquipedia/Page]] AND [[namespace::0]]&#x60; (optional)
     * @param  string $query The datapoints you want to query.  **Example:** &#x60;pagename, pageid, namespace&#x60; (optional)
     * @param  int $limit The amount of results you want.  **Example:** &#x60;20&#x60; (optional)
     * @param  int $offset This can be used for pagination.  **Example:** &#x60;20&#x60; (optional)
     * @param  string $order The order you want your result in.  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $groupby What you want your results grouped by (this can be helpful when using aggregate functions).  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['broadcastersGet'] to see the possible values for this operation
     *
     * @throws \Liquipedia\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Liquipedia\Client\Model\BroadcastersGet200Response|\Liquipedia\Client\Model\Error|\Liquipedia\Client\Model\Error|\Liquipedia\Client\Model\Error
     */
    public function broadcastersGet($wiki, $conditions = null, $query = null, $limit = null, $offset = null, $order = null, $groupby = null, string $contentType = self::contentTypes['broadcastersGet'][0])
    {
        list($response) = $this->broadcastersGetWithHttpInfo($wiki, $conditions, $query, $limit, $offset, $order, $groupby, $contentType);
        return $response;
    }

    /**
     * Operation broadcastersGetWithHttpInfo
     *
     * Get broadcasters
     *
     * @param  string $wiki The wikis you want data from. Pipe-separate multiple wikis for multiwiki requests.  **Example:** &#x60;dota2&#x60;, &#x60;dota2|counterstrike&#x60; (required)
     * @param  string $conditions The filters you want to apply to the request.  **Example:** &#x60;[[pagename::Some/Liquipedia/Page]] AND [[namespace::0]]&#x60; (optional)
     * @param  string $query The datapoints you want to query.  **Example:** &#x60;pagename, pageid, namespace&#x60; (optional)
     * @param  int $limit The amount of results you want.  **Example:** &#x60;20&#x60; (optional)
     * @param  int $offset This can be used for pagination.  **Example:** &#x60;20&#x60; (optional)
     * @param  string $order The order you want your result in.  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $groupby What you want your results grouped by (this can be helpful when using aggregate functions).  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['broadcastersGet'] to see the possible values for this operation
     *
     * @throws \Liquipedia\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Liquipedia\Client\Model\BroadcastersGet200Response|\Liquipedia\Client\Model\Error|\Liquipedia\Client\Model\Error|\Liquipedia\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function broadcastersGetWithHttpInfo($wiki, $conditions = null, $query = null, $limit = null, $offset = null, $order = null, $groupby = null, string $contentType = self::contentTypes['broadcastersGet'][0])
    {
        $request = $this->broadcastersGetRequest($wiki, $conditions, $query, $limit, $offset, $order, $groupby, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Liquipedia\Client\Model\BroadcastersGet200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Liquipedia\Client\Model\BroadcastersGet200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Liquipedia\Client\Model\BroadcastersGet200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Liquipedia\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Liquipedia\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Liquipedia\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Liquipedia\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Liquipedia\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Liquipedia\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Liquipedia\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Liquipedia\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Liquipedia\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Liquipedia\Client\Model\BroadcastersGet200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Liquipedia\Client\Model\BroadcastersGet200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Liquipedia\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Liquipedia\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Liquipedia\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation broadcastersGetAsync
     *
     * Get broadcasters
     *
     * @param  string $wiki The wikis you want data from. Pipe-separate multiple wikis for multiwiki requests.  **Example:** &#x60;dota2&#x60;, &#x60;dota2|counterstrike&#x60; (required)
     * @param  string $conditions The filters you want to apply to the request.  **Example:** &#x60;[[pagename::Some/Liquipedia/Page]] AND [[namespace::0]]&#x60; (optional)
     * @param  string $query The datapoints you want to query.  **Example:** &#x60;pagename, pageid, namespace&#x60; (optional)
     * @param  int $limit The amount of results you want.  **Example:** &#x60;20&#x60; (optional)
     * @param  int $offset This can be used for pagination.  **Example:** &#x60;20&#x60; (optional)
     * @param  string $order The order you want your result in.  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $groupby What you want your results grouped by (this can be helpful when using aggregate functions).  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['broadcastersGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function broadcastersGetAsync($wiki, $conditions = null, $query = null, $limit = null, $offset = null, $order = null, $groupby = null, string $contentType = self::contentTypes['broadcastersGet'][0])
    {
        return $this->broadcastersGetAsyncWithHttpInfo($wiki, $conditions, $query, $limit, $offset, $order, $groupby, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation broadcastersGetAsyncWithHttpInfo
     *
     * Get broadcasters
     *
     * @param  string $wiki The wikis you want data from. Pipe-separate multiple wikis for multiwiki requests.  **Example:** &#x60;dota2&#x60;, &#x60;dota2|counterstrike&#x60; (required)
     * @param  string $conditions The filters you want to apply to the request.  **Example:** &#x60;[[pagename::Some/Liquipedia/Page]] AND [[namespace::0]]&#x60; (optional)
     * @param  string $query The datapoints you want to query.  **Example:** &#x60;pagename, pageid, namespace&#x60; (optional)
     * @param  int $limit The amount of results you want.  **Example:** &#x60;20&#x60; (optional)
     * @param  int $offset This can be used for pagination.  **Example:** &#x60;20&#x60; (optional)
     * @param  string $order The order you want your result in.  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $groupby What you want your results grouped by (this can be helpful when using aggregate functions).  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['broadcastersGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function broadcastersGetAsyncWithHttpInfo($wiki, $conditions = null, $query = null, $limit = null, $offset = null, $order = null, $groupby = null, string $contentType = self::contentTypes['broadcastersGet'][0])
    {
        $returnType = '\Liquipedia\Client\Model\BroadcastersGet200Response';
        $request = $this->broadcastersGetRequest($wiki, $conditions, $query, $limit, $offset, $order, $groupby, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'broadcastersGet'
     *
     * @param  string $wiki The wikis you want data from. Pipe-separate multiple wikis for multiwiki requests.  **Example:** &#x60;dota2&#x60;, &#x60;dota2|counterstrike&#x60; (required)
     * @param  string $conditions The filters you want to apply to the request.  **Example:** &#x60;[[pagename::Some/Liquipedia/Page]] AND [[namespace::0]]&#x60; (optional)
     * @param  string $query The datapoints you want to query.  **Example:** &#x60;pagename, pageid, namespace&#x60; (optional)
     * @param  int $limit The amount of results you want.  **Example:** &#x60;20&#x60; (optional)
     * @param  int $offset This can be used for pagination.  **Example:** &#x60;20&#x60; (optional)
     * @param  string $order The order you want your result in.  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $groupby What you want your results grouped by (this can be helpful when using aggregate functions).  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['broadcastersGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function broadcastersGetRequest($wiki, $conditions = null, $query = null, $limit = null, $offset = null, $order = null, $groupby = null, string $contentType = self::contentTypes['broadcastersGet'][0])
    {

        // verify the required parameter 'wiki' is set
        if ($wiki === null || (is_array($wiki) && count($wiki) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $wiki when calling broadcastersGet'
            );
        }








        $resourcePath = '/broadcasters';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $wiki,
            'wiki', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $conditions,
            'conditions', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $query,
            'query', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order,
            'order', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $groupby,
            'groupby', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('authorization');
        if ($apiKey !== null) {
            $headers['authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation companyGet
     *
     * Get companies
     *
     * @param  string $wiki The wikis you want data from. Pipe-separate multiple wikis for multiwiki requests.  **Example:** &#x60;dota2&#x60;, &#x60;dota2|counterstrike&#x60; (required)
     * @param  string $conditions The filters you want to apply to the request.  **Example:** &#x60;[[pagename::Some/Liquipedia/Page]] AND [[namespace::0]]&#x60; (optional)
     * @param  string $query The datapoints you want to query.  **Example:** &#x60;pagename, pageid, namespace&#x60; (optional)
     * @param  int $limit The amount of results you want.  **Example:** &#x60;20&#x60; (optional)
     * @param  int $offset This can be used for pagination.  **Example:** &#x60;20&#x60; (optional)
     * @param  string $order The order you want your result in.  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $groupby What you want your results grouped by (this can be helpful when using aggregate functions).  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companyGet'] to see the possible values for this operation
     *
     * @throws \Liquipedia\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Liquipedia\Client\Model\BroadcastersGet200Response|\Liquipedia\Client\Model\Error|\Liquipedia\Client\Model\Error|\Liquipedia\Client\Model\Error
     */
    public function companyGet($wiki, $conditions = null, $query = null, $limit = null, $offset = null, $order = null, $groupby = null, string $contentType = self::contentTypes['companyGet'][0])
    {
        list($response) = $this->companyGetWithHttpInfo($wiki, $conditions, $query, $limit, $offset, $order, $groupby, $contentType);
        return $response;
    }

    /**
     * Operation companyGetWithHttpInfo
     *
     * Get companies
     *
     * @param  string $wiki The wikis you want data from. Pipe-separate multiple wikis for multiwiki requests.  **Example:** &#x60;dota2&#x60;, &#x60;dota2|counterstrike&#x60; (required)
     * @param  string $conditions The filters you want to apply to the request.  **Example:** &#x60;[[pagename::Some/Liquipedia/Page]] AND [[namespace::0]]&#x60; (optional)
     * @param  string $query The datapoints you want to query.  **Example:** &#x60;pagename, pageid, namespace&#x60; (optional)
     * @param  int $limit The amount of results you want.  **Example:** &#x60;20&#x60; (optional)
     * @param  int $offset This can be used for pagination.  **Example:** &#x60;20&#x60; (optional)
     * @param  string $order The order you want your result in.  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $groupby What you want your results grouped by (this can be helpful when using aggregate functions).  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companyGet'] to see the possible values for this operation
     *
     * @throws \Liquipedia\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Liquipedia\Client\Model\BroadcastersGet200Response|\Liquipedia\Client\Model\Error|\Liquipedia\Client\Model\Error|\Liquipedia\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function companyGetWithHttpInfo($wiki, $conditions = null, $query = null, $limit = null, $offset = null, $order = null, $groupby = null, string $contentType = self::contentTypes['companyGet'][0])
    {
        $request = $this->companyGetRequest($wiki, $conditions, $query, $limit, $offset, $order, $groupby, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Liquipedia\Client\Model\BroadcastersGet200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Liquipedia\Client\Model\BroadcastersGet200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Liquipedia\Client\Model\BroadcastersGet200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Liquipedia\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Liquipedia\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Liquipedia\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Liquipedia\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Liquipedia\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Liquipedia\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Liquipedia\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Liquipedia\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Liquipedia\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Liquipedia\Client\Model\BroadcastersGet200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Liquipedia\Client\Model\BroadcastersGet200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Liquipedia\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Liquipedia\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Liquipedia\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation companyGetAsync
     *
     * Get companies
     *
     * @param  string $wiki The wikis you want data from. Pipe-separate multiple wikis for multiwiki requests.  **Example:** &#x60;dota2&#x60;, &#x60;dota2|counterstrike&#x60; (required)
     * @param  string $conditions The filters you want to apply to the request.  **Example:** &#x60;[[pagename::Some/Liquipedia/Page]] AND [[namespace::0]]&#x60; (optional)
     * @param  string $query The datapoints you want to query.  **Example:** &#x60;pagename, pageid, namespace&#x60; (optional)
     * @param  int $limit The amount of results you want.  **Example:** &#x60;20&#x60; (optional)
     * @param  int $offset This can be used for pagination.  **Example:** &#x60;20&#x60; (optional)
     * @param  string $order The order you want your result in.  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $groupby What you want your results grouped by (this can be helpful when using aggregate functions).  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companyGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companyGetAsync($wiki, $conditions = null, $query = null, $limit = null, $offset = null, $order = null, $groupby = null, string $contentType = self::contentTypes['companyGet'][0])
    {
        return $this->companyGetAsyncWithHttpInfo($wiki, $conditions, $query, $limit, $offset, $order, $groupby, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation companyGetAsyncWithHttpInfo
     *
     * Get companies
     *
     * @param  string $wiki The wikis you want data from. Pipe-separate multiple wikis for multiwiki requests.  **Example:** &#x60;dota2&#x60;, &#x60;dota2|counterstrike&#x60; (required)
     * @param  string $conditions The filters you want to apply to the request.  **Example:** &#x60;[[pagename::Some/Liquipedia/Page]] AND [[namespace::0]]&#x60; (optional)
     * @param  string $query The datapoints you want to query.  **Example:** &#x60;pagename, pageid, namespace&#x60; (optional)
     * @param  int $limit The amount of results you want.  **Example:** &#x60;20&#x60; (optional)
     * @param  int $offset This can be used for pagination.  **Example:** &#x60;20&#x60; (optional)
     * @param  string $order The order you want your result in.  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $groupby What you want your results grouped by (this can be helpful when using aggregate functions).  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companyGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companyGetAsyncWithHttpInfo($wiki, $conditions = null, $query = null, $limit = null, $offset = null, $order = null, $groupby = null, string $contentType = self::contentTypes['companyGet'][0])
    {
        $returnType = '\Liquipedia\Client\Model\BroadcastersGet200Response';
        $request = $this->companyGetRequest($wiki, $conditions, $query, $limit, $offset, $order, $groupby, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'companyGet'
     *
     * @param  string $wiki The wikis you want data from. Pipe-separate multiple wikis for multiwiki requests.  **Example:** &#x60;dota2&#x60;, &#x60;dota2|counterstrike&#x60; (required)
     * @param  string $conditions The filters you want to apply to the request.  **Example:** &#x60;[[pagename::Some/Liquipedia/Page]] AND [[namespace::0]]&#x60; (optional)
     * @param  string $query The datapoints you want to query.  **Example:** &#x60;pagename, pageid, namespace&#x60; (optional)
     * @param  int $limit The amount of results you want.  **Example:** &#x60;20&#x60; (optional)
     * @param  int $offset This can be used for pagination.  **Example:** &#x60;20&#x60; (optional)
     * @param  string $order The order you want your result in.  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $groupby What you want your results grouped by (this can be helpful when using aggregate functions).  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companyGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function companyGetRequest($wiki, $conditions = null, $query = null, $limit = null, $offset = null, $order = null, $groupby = null, string $contentType = self::contentTypes['companyGet'][0])
    {

        // verify the required parameter 'wiki' is set
        if ($wiki === null || (is_array($wiki) && count($wiki) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $wiki when calling companyGet'
            );
        }








        $resourcePath = '/company';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $wiki,
            'wiki', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $conditions,
            'conditions', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $query,
            'query', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order,
            'order', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $groupby,
            'groupby', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('authorization');
        if ($apiKey !== null) {
            $headers['authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation datapointGet
     *
     * Get datapoints
     *
     * @param  string $wiki The wikis you want data from. Pipe-separate multiple wikis for multiwiki requests.  **Example:** &#x60;dota2&#x60;, &#x60;dota2|counterstrike&#x60; (required)
     * @param  string $conditions The filters you want to apply to the request.  **Example:** &#x60;[[pagename::Some/Liquipedia/Page]] AND [[namespace::0]]&#x60; (optional)
     * @param  string $query The datapoints you want to query.  **Example:** &#x60;pagename, pageid, namespace&#x60; (optional)
     * @param  int $limit The amount of results you want.  **Example:** &#x60;20&#x60; (optional)
     * @param  int $offset This can be used for pagination.  **Example:** &#x60;20&#x60; (optional)
     * @param  string $order The order you want your result in.  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $groupby What you want your results grouped by (this can be helpful when using aggregate functions).  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['datapointGet'] to see the possible values for this operation
     *
     * @throws \Liquipedia\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Liquipedia\Client\Model\BroadcastersGet200Response|\Liquipedia\Client\Model\Error|\Liquipedia\Client\Model\Error|\Liquipedia\Client\Model\Error
     */
    public function datapointGet($wiki, $conditions = null, $query = null, $limit = null, $offset = null, $order = null, $groupby = null, string $contentType = self::contentTypes['datapointGet'][0])
    {
        list($response) = $this->datapointGetWithHttpInfo($wiki, $conditions, $query, $limit, $offset, $order, $groupby, $contentType);
        return $response;
    }

    /**
     * Operation datapointGetWithHttpInfo
     *
     * Get datapoints
     *
     * @param  string $wiki The wikis you want data from. Pipe-separate multiple wikis for multiwiki requests.  **Example:** &#x60;dota2&#x60;, &#x60;dota2|counterstrike&#x60; (required)
     * @param  string $conditions The filters you want to apply to the request.  **Example:** &#x60;[[pagename::Some/Liquipedia/Page]] AND [[namespace::0]]&#x60; (optional)
     * @param  string $query The datapoints you want to query.  **Example:** &#x60;pagename, pageid, namespace&#x60; (optional)
     * @param  int $limit The amount of results you want.  **Example:** &#x60;20&#x60; (optional)
     * @param  int $offset This can be used for pagination.  **Example:** &#x60;20&#x60; (optional)
     * @param  string $order The order you want your result in.  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $groupby What you want your results grouped by (this can be helpful when using aggregate functions).  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['datapointGet'] to see the possible values for this operation
     *
     * @throws \Liquipedia\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Liquipedia\Client\Model\BroadcastersGet200Response|\Liquipedia\Client\Model\Error|\Liquipedia\Client\Model\Error|\Liquipedia\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function datapointGetWithHttpInfo($wiki, $conditions = null, $query = null, $limit = null, $offset = null, $order = null, $groupby = null, string $contentType = self::contentTypes['datapointGet'][0])
    {
        $request = $this->datapointGetRequest($wiki, $conditions, $query, $limit, $offset, $order, $groupby, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Liquipedia\Client\Model\BroadcastersGet200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Liquipedia\Client\Model\BroadcastersGet200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Liquipedia\Client\Model\BroadcastersGet200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Liquipedia\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Liquipedia\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Liquipedia\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Liquipedia\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Liquipedia\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Liquipedia\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Liquipedia\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Liquipedia\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Liquipedia\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Liquipedia\Client\Model\BroadcastersGet200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Liquipedia\Client\Model\BroadcastersGet200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Liquipedia\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Liquipedia\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Liquipedia\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation datapointGetAsync
     *
     * Get datapoints
     *
     * @param  string $wiki The wikis you want data from. Pipe-separate multiple wikis for multiwiki requests.  **Example:** &#x60;dota2&#x60;, &#x60;dota2|counterstrike&#x60; (required)
     * @param  string $conditions The filters you want to apply to the request.  **Example:** &#x60;[[pagename::Some/Liquipedia/Page]] AND [[namespace::0]]&#x60; (optional)
     * @param  string $query The datapoints you want to query.  **Example:** &#x60;pagename, pageid, namespace&#x60; (optional)
     * @param  int $limit The amount of results you want.  **Example:** &#x60;20&#x60; (optional)
     * @param  int $offset This can be used for pagination.  **Example:** &#x60;20&#x60; (optional)
     * @param  string $order The order you want your result in.  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $groupby What you want your results grouped by (this can be helpful when using aggregate functions).  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['datapointGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function datapointGetAsync($wiki, $conditions = null, $query = null, $limit = null, $offset = null, $order = null, $groupby = null, string $contentType = self::contentTypes['datapointGet'][0])
    {
        return $this->datapointGetAsyncWithHttpInfo($wiki, $conditions, $query, $limit, $offset, $order, $groupby, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation datapointGetAsyncWithHttpInfo
     *
     * Get datapoints
     *
     * @param  string $wiki The wikis you want data from. Pipe-separate multiple wikis for multiwiki requests.  **Example:** &#x60;dota2&#x60;, &#x60;dota2|counterstrike&#x60; (required)
     * @param  string $conditions The filters you want to apply to the request.  **Example:** &#x60;[[pagename::Some/Liquipedia/Page]] AND [[namespace::0]]&#x60; (optional)
     * @param  string $query The datapoints you want to query.  **Example:** &#x60;pagename, pageid, namespace&#x60; (optional)
     * @param  int $limit The amount of results you want.  **Example:** &#x60;20&#x60; (optional)
     * @param  int $offset This can be used for pagination.  **Example:** &#x60;20&#x60; (optional)
     * @param  string $order The order you want your result in.  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $groupby What you want your results grouped by (this can be helpful when using aggregate functions).  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['datapointGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function datapointGetAsyncWithHttpInfo($wiki, $conditions = null, $query = null, $limit = null, $offset = null, $order = null, $groupby = null, string $contentType = self::contentTypes['datapointGet'][0])
    {
        $returnType = '\Liquipedia\Client\Model\BroadcastersGet200Response';
        $request = $this->datapointGetRequest($wiki, $conditions, $query, $limit, $offset, $order, $groupby, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'datapointGet'
     *
     * @param  string $wiki The wikis you want data from. Pipe-separate multiple wikis for multiwiki requests.  **Example:** &#x60;dota2&#x60;, &#x60;dota2|counterstrike&#x60; (required)
     * @param  string $conditions The filters you want to apply to the request.  **Example:** &#x60;[[pagename::Some/Liquipedia/Page]] AND [[namespace::0]]&#x60; (optional)
     * @param  string $query The datapoints you want to query.  **Example:** &#x60;pagename, pageid, namespace&#x60; (optional)
     * @param  int $limit The amount of results you want.  **Example:** &#x60;20&#x60; (optional)
     * @param  int $offset This can be used for pagination.  **Example:** &#x60;20&#x60; (optional)
     * @param  string $order The order you want your result in.  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $groupby What you want your results grouped by (this can be helpful when using aggregate functions).  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['datapointGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function datapointGetRequest($wiki, $conditions = null, $query = null, $limit = null, $offset = null, $order = null, $groupby = null, string $contentType = self::contentTypes['datapointGet'][0])
    {

        // verify the required parameter 'wiki' is set
        if ($wiki === null || (is_array($wiki) && count($wiki) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $wiki when calling datapointGet'
            );
        }








        $resourcePath = '/datapoint';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $wiki,
            'wiki', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $conditions,
            'conditions', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $query,
            'query', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order,
            'order', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $groupby,
            'groupby', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('authorization');
        if ($apiKey !== null) {
            $headers['authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation externalmedialinkGet
     *
     * Get media links
     *
     * @param  string $wiki The wikis you want data from. Pipe-separate multiple wikis for multiwiki requests.  **Example:** &#x60;dota2&#x60;, &#x60;dota2|counterstrike&#x60; (required)
     * @param  string $conditions The filters you want to apply to the request.  **Example:** &#x60;[[pagename::Some/Liquipedia/Page]] AND [[namespace::0]]&#x60; (optional)
     * @param  string $query The datapoints you want to query.  **Example:** &#x60;pagename, pageid, namespace&#x60; (optional)
     * @param  int $limit The amount of results you want.  **Example:** &#x60;20&#x60; (optional)
     * @param  int $offset This can be used for pagination.  **Example:** &#x60;20&#x60; (optional)
     * @param  string $order The order you want your result in.  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $groupby What you want your results grouped by (this can be helpful when using aggregate functions).  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['externalmedialinkGet'] to see the possible values for this operation
     *
     * @throws \Liquipedia\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Liquipedia\Client\Model\BroadcastersGet200Response|\Liquipedia\Client\Model\Error|\Liquipedia\Client\Model\Error|\Liquipedia\Client\Model\Error
     */
    public function externalmedialinkGet($wiki, $conditions = null, $query = null, $limit = null, $offset = null, $order = null, $groupby = null, string $contentType = self::contentTypes['externalmedialinkGet'][0])
    {
        list($response) = $this->externalmedialinkGetWithHttpInfo($wiki, $conditions, $query, $limit, $offset, $order, $groupby, $contentType);
        return $response;
    }

    /**
     * Operation externalmedialinkGetWithHttpInfo
     *
     * Get media links
     *
     * @param  string $wiki The wikis you want data from. Pipe-separate multiple wikis for multiwiki requests.  **Example:** &#x60;dota2&#x60;, &#x60;dota2|counterstrike&#x60; (required)
     * @param  string $conditions The filters you want to apply to the request.  **Example:** &#x60;[[pagename::Some/Liquipedia/Page]] AND [[namespace::0]]&#x60; (optional)
     * @param  string $query The datapoints you want to query.  **Example:** &#x60;pagename, pageid, namespace&#x60; (optional)
     * @param  int $limit The amount of results you want.  **Example:** &#x60;20&#x60; (optional)
     * @param  int $offset This can be used for pagination.  **Example:** &#x60;20&#x60; (optional)
     * @param  string $order The order you want your result in.  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $groupby What you want your results grouped by (this can be helpful when using aggregate functions).  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['externalmedialinkGet'] to see the possible values for this operation
     *
     * @throws \Liquipedia\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Liquipedia\Client\Model\BroadcastersGet200Response|\Liquipedia\Client\Model\Error|\Liquipedia\Client\Model\Error|\Liquipedia\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function externalmedialinkGetWithHttpInfo($wiki, $conditions = null, $query = null, $limit = null, $offset = null, $order = null, $groupby = null, string $contentType = self::contentTypes['externalmedialinkGet'][0])
    {
        $request = $this->externalmedialinkGetRequest($wiki, $conditions, $query, $limit, $offset, $order, $groupby, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Liquipedia\Client\Model\BroadcastersGet200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Liquipedia\Client\Model\BroadcastersGet200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Liquipedia\Client\Model\BroadcastersGet200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Liquipedia\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Liquipedia\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Liquipedia\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Liquipedia\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Liquipedia\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Liquipedia\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Liquipedia\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Liquipedia\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Liquipedia\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Liquipedia\Client\Model\BroadcastersGet200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Liquipedia\Client\Model\BroadcastersGet200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Liquipedia\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Liquipedia\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Liquipedia\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation externalmedialinkGetAsync
     *
     * Get media links
     *
     * @param  string $wiki The wikis you want data from. Pipe-separate multiple wikis for multiwiki requests.  **Example:** &#x60;dota2&#x60;, &#x60;dota2|counterstrike&#x60; (required)
     * @param  string $conditions The filters you want to apply to the request.  **Example:** &#x60;[[pagename::Some/Liquipedia/Page]] AND [[namespace::0]]&#x60; (optional)
     * @param  string $query The datapoints you want to query.  **Example:** &#x60;pagename, pageid, namespace&#x60; (optional)
     * @param  int $limit The amount of results you want.  **Example:** &#x60;20&#x60; (optional)
     * @param  int $offset This can be used for pagination.  **Example:** &#x60;20&#x60; (optional)
     * @param  string $order The order you want your result in.  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $groupby What you want your results grouped by (this can be helpful when using aggregate functions).  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['externalmedialinkGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function externalmedialinkGetAsync($wiki, $conditions = null, $query = null, $limit = null, $offset = null, $order = null, $groupby = null, string $contentType = self::contentTypes['externalmedialinkGet'][0])
    {
        return $this->externalmedialinkGetAsyncWithHttpInfo($wiki, $conditions, $query, $limit, $offset, $order, $groupby, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation externalmedialinkGetAsyncWithHttpInfo
     *
     * Get media links
     *
     * @param  string $wiki The wikis you want data from. Pipe-separate multiple wikis for multiwiki requests.  **Example:** &#x60;dota2&#x60;, &#x60;dota2|counterstrike&#x60; (required)
     * @param  string $conditions The filters you want to apply to the request.  **Example:** &#x60;[[pagename::Some/Liquipedia/Page]] AND [[namespace::0]]&#x60; (optional)
     * @param  string $query The datapoints you want to query.  **Example:** &#x60;pagename, pageid, namespace&#x60; (optional)
     * @param  int $limit The amount of results you want.  **Example:** &#x60;20&#x60; (optional)
     * @param  int $offset This can be used for pagination.  **Example:** &#x60;20&#x60; (optional)
     * @param  string $order The order you want your result in.  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $groupby What you want your results grouped by (this can be helpful when using aggregate functions).  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['externalmedialinkGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function externalmedialinkGetAsyncWithHttpInfo($wiki, $conditions = null, $query = null, $limit = null, $offset = null, $order = null, $groupby = null, string $contentType = self::contentTypes['externalmedialinkGet'][0])
    {
        $returnType = '\Liquipedia\Client\Model\BroadcastersGet200Response';
        $request = $this->externalmedialinkGetRequest($wiki, $conditions, $query, $limit, $offset, $order, $groupby, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'externalmedialinkGet'
     *
     * @param  string $wiki The wikis you want data from. Pipe-separate multiple wikis for multiwiki requests.  **Example:** &#x60;dota2&#x60;, &#x60;dota2|counterstrike&#x60; (required)
     * @param  string $conditions The filters you want to apply to the request.  **Example:** &#x60;[[pagename::Some/Liquipedia/Page]] AND [[namespace::0]]&#x60; (optional)
     * @param  string $query The datapoints you want to query.  **Example:** &#x60;pagename, pageid, namespace&#x60; (optional)
     * @param  int $limit The amount of results you want.  **Example:** &#x60;20&#x60; (optional)
     * @param  int $offset This can be used for pagination.  **Example:** &#x60;20&#x60; (optional)
     * @param  string $order The order you want your result in.  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $groupby What you want your results grouped by (this can be helpful when using aggregate functions).  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['externalmedialinkGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function externalmedialinkGetRequest($wiki, $conditions = null, $query = null, $limit = null, $offset = null, $order = null, $groupby = null, string $contentType = self::contentTypes['externalmedialinkGet'][0])
    {

        // verify the required parameter 'wiki' is set
        if ($wiki === null || (is_array($wiki) && count($wiki) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $wiki when calling externalmedialinkGet'
            );
        }








        $resourcePath = '/externalmedialink';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $wiki,
            'wiki', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $conditions,
            'conditions', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $query,
            'query', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order,
            'order', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $groupby,
            'groupby', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('authorization');
        if ($apiKey !== null) {
            $headers['authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation matchGet
     *
     * Get matches
     *
     * @param  string $wiki The wikis you want data from. Pipe-separate multiple wikis for multiwiki requests.  **Example:** &#x60;dota2&#x60;, &#x60;dota2|counterstrike&#x60; (required)
     * @param  string $conditions The filters you want to apply to the request.  **Example:** &#x60;[[pagename::Some/Liquipedia/Page]] AND [[namespace::0]]&#x60; (optional)
     * @param  string $query The datapoints you want to query.  **Example:** &#x60;pagename, pageid, namespace&#x60; (optional)
     * @param  int $limit The amount of results you want.  **Example:** &#x60;20&#x60; (optional)
     * @param  int $offset This can be used for pagination.  **Example:** &#x60;20&#x60; (optional)
     * @param  string $order The order you want your result in.  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $groupby What you want your results grouped by (this can be helpful when using aggregate functions).  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $rawstreams If you want the raw stream data. Read the full documentation on how this correlates with &#x60;streamurls&#x60;.  **Example:** &#x60;true&#x60;, &#x60;false&#x60; (optional, default to 'false')
     * @param  string $streamurls If you want to get stream urls to link to. Read the full documentation on how this correlates with &#x60;rawstreams&#x60;.  **Example:** &#x60;true&#x60;, &#x60;false&#x60; (optional, default to 'false')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['matchGet'] to see the possible values for this operation
     *
     * @throws \Liquipedia\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Liquipedia\Client\Model\BroadcastersGet200Response|\Liquipedia\Client\Model\Error|\Liquipedia\Client\Model\Error|\Liquipedia\Client\Model\Error
     */
    public function matchGet($wiki, $conditions = null, $query = null, $limit = null, $offset = null, $order = null, $groupby = null, $rawstreams = 'false', $streamurls = 'false', string $contentType = self::contentTypes['matchGet'][0])
    {
        list($response) = $this->matchGetWithHttpInfo($wiki, $conditions, $query, $limit, $offset, $order, $groupby, $rawstreams, $streamurls, $contentType);
        return $response;
    }

    /**
     * Operation matchGetWithHttpInfo
     *
     * Get matches
     *
     * @param  string $wiki The wikis you want data from. Pipe-separate multiple wikis for multiwiki requests.  **Example:** &#x60;dota2&#x60;, &#x60;dota2|counterstrike&#x60; (required)
     * @param  string $conditions The filters you want to apply to the request.  **Example:** &#x60;[[pagename::Some/Liquipedia/Page]] AND [[namespace::0]]&#x60; (optional)
     * @param  string $query The datapoints you want to query.  **Example:** &#x60;pagename, pageid, namespace&#x60; (optional)
     * @param  int $limit The amount of results you want.  **Example:** &#x60;20&#x60; (optional)
     * @param  int $offset This can be used for pagination.  **Example:** &#x60;20&#x60; (optional)
     * @param  string $order The order you want your result in.  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $groupby What you want your results grouped by (this can be helpful when using aggregate functions).  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $rawstreams If you want the raw stream data. Read the full documentation on how this correlates with &#x60;streamurls&#x60;.  **Example:** &#x60;true&#x60;, &#x60;false&#x60; (optional, default to 'false')
     * @param  string $streamurls If you want to get stream urls to link to. Read the full documentation on how this correlates with &#x60;rawstreams&#x60;.  **Example:** &#x60;true&#x60;, &#x60;false&#x60; (optional, default to 'false')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['matchGet'] to see the possible values for this operation
     *
     * @throws \Liquipedia\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Liquipedia\Client\Model\BroadcastersGet200Response|\Liquipedia\Client\Model\Error|\Liquipedia\Client\Model\Error|\Liquipedia\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function matchGetWithHttpInfo($wiki, $conditions = null, $query = null, $limit = null, $offset = null, $order = null, $groupby = null, $rawstreams = 'false', $streamurls = 'false', string $contentType = self::contentTypes['matchGet'][0])
    {
        $request = $this->matchGetRequest($wiki, $conditions, $query, $limit, $offset, $order, $groupby, $rawstreams, $streamurls, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Liquipedia\Client\Model\BroadcastersGet200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Liquipedia\Client\Model\BroadcastersGet200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Liquipedia\Client\Model\BroadcastersGet200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Liquipedia\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Liquipedia\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Liquipedia\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Liquipedia\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Liquipedia\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Liquipedia\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Liquipedia\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Liquipedia\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Liquipedia\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Liquipedia\Client\Model\BroadcastersGet200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Liquipedia\Client\Model\BroadcastersGet200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Liquipedia\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Liquipedia\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Liquipedia\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation matchGetAsync
     *
     * Get matches
     *
     * @param  string $wiki The wikis you want data from. Pipe-separate multiple wikis for multiwiki requests.  **Example:** &#x60;dota2&#x60;, &#x60;dota2|counterstrike&#x60; (required)
     * @param  string $conditions The filters you want to apply to the request.  **Example:** &#x60;[[pagename::Some/Liquipedia/Page]] AND [[namespace::0]]&#x60; (optional)
     * @param  string $query The datapoints you want to query.  **Example:** &#x60;pagename, pageid, namespace&#x60; (optional)
     * @param  int $limit The amount of results you want.  **Example:** &#x60;20&#x60; (optional)
     * @param  int $offset This can be used for pagination.  **Example:** &#x60;20&#x60; (optional)
     * @param  string $order The order you want your result in.  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $groupby What you want your results grouped by (this can be helpful when using aggregate functions).  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $rawstreams If you want the raw stream data. Read the full documentation on how this correlates with &#x60;streamurls&#x60;.  **Example:** &#x60;true&#x60;, &#x60;false&#x60; (optional, default to 'false')
     * @param  string $streamurls If you want to get stream urls to link to. Read the full documentation on how this correlates with &#x60;rawstreams&#x60;.  **Example:** &#x60;true&#x60;, &#x60;false&#x60; (optional, default to 'false')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['matchGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function matchGetAsync($wiki, $conditions = null, $query = null, $limit = null, $offset = null, $order = null, $groupby = null, $rawstreams = 'false', $streamurls = 'false', string $contentType = self::contentTypes['matchGet'][0])
    {
        return $this->matchGetAsyncWithHttpInfo($wiki, $conditions, $query, $limit, $offset, $order, $groupby, $rawstreams, $streamurls, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation matchGetAsyncWithHttpInfo
     *
     * Get matches
     *
     * @param  string $wiki The wikis you want data from. Pipe-separate multiple wikis for multiwiki requests.  **Example:** &#x60;dota2&#x60;, &#x60;dota2|counterstrike&#x60; (required)
     * @param  string $conditions The filters you want to apply to the request.  **Example:** &#x60;[[pagename::Some/Liquipedia/Page]] AND [[namespace::0]]&#x60; (optional)
     * @param  string $query The datapoints you want to query.  **Example:** &#x60;pagename, pageid, namespace&#x60; (optional)
     * @param  int $limit The amount of results you want.  **Example:** &#x60;20&#x60; (optional)
     * @param  int $offset This can be used for pagination.  **Example:** &#x60;20&#x60; (optional)
     * @param  string $order The order you want your result in.  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $groupby What you want your results grouped by (this can be helpful when using aggregate functions).  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $rawstreams If you want the raw stream data. Read the full documentation on how this correlates with &#x60;streamurls&#x60;.  **Example:** &#x60;true&#x60;, &#x60;false&#x60; (optional, default to 'false')
     * @param  string $streamurls If you want to get stream urls to link to. Read the full documentation on how this correlates with &#x60;rawstreams&#x60;.  **Example:** &#x60;true&#x60;, &#x60;false&#x60; (optional, default to 'false')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['matchGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function matchGetAsyncWithHttpInfo($wiki, $conditions = null, $query = null, $limit = null, $offset = null, $order = null, $groupby = null, $rawstreams = 'false', $streamurls = 'false', string $contentType = self::contentTypes['matchGet'][0])
    {
        $returnType = '\Liquipedia\Client\Model\BroadcastersGet200Response';
        $request = $this->matchGetRequest($wiki, $conditions, $query, $limit, $offset, $order, $groupby, $rawstreams, $streamurls, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'matchGet'
     *
     * @param  string $wiki The wikis you want data from. Pipe-separate multiple wikis for multiwiki requests.  **Example:** &#x60;dota2&#x60;, &#x60;dota2|counterstrike&#x60; (required)
     * @param  string $conditions The filters you want to apply to the request.  **Example:** &#x60;[[pagename::Some/Liquipedia/Page]] AND [[namespace::0]]&#x60; (optional)
     * @param  string $query The datapoints you want to query.  **Example:** &#x60;pagename, pageid, namespace&#x60; (optional)
     * @param  int $limit The amount of results you want.  **Example:** &#x60;20&#x60; (optional)
     * @param  int $offset This can be used for pagination.  **Example:** &#x60;20&#x60; (optional)
     * @param  string $order The order you want your result in.  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $groupby What you want your results grouped by (this can be helpful when using aggregate functions).  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $rawstreams If you want the raw stream data. Read the full documentation on how this correlates with &#x60;streamurls&#x60;.  **Example:** &#x60;true&#x60;, &#x60;false&#x60; (optional, default to 'false')
     * @param  string $streamurls If you want to get stream urls to link to. Read the full documentation on how this correlates with &#x60;rawstreams&#x60;.  **Example:** &#x60;true&#x60;, &#x60;false&#x60; (optional, default to 'false')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['matchGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function matchGetRequest($wiki, $conditions = null, $query = null, $limit = null, $offset = null, $order = null, $groupby = null, $rawstreams = 'false', $streamurls = 'false', string $contentType = self::contentTypes['matchGet'][0])
    {

        // verify the required parameter 'wiki' is set
        if ($wiki === null || (is_array($wiki) && count($wiki) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $wiki when calling matchGet'
            );
        }










        $resourcePath = '/match';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $wiki,
            'wiki', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $conditions,
            'conditions', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $query,
            'query', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order,
            'order', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $groupby,
            'groupby', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $rawstreams,
            'rawstreams', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $streamurls,
            'streamurls', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('authorization');
        if ($apiKey !== null) {
            $headers['authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation placementGet
     *
     * Get placements
     *
     * @param  string $wiki The wikis you want data from. Pipe-separate multiple wikis for multiwiki requests.  **Example:** &#x60;dota2&#x60;, &#x60;dota2|counterstrike&#x60; (required)
     * @param  string $conditions The filters you want to apply to the request.  **Example:** &#x60;[[pagename::Some/Liquipedia/Page]] AND [[namespace::0]]&#x60; (optional)
     * @param  string $query The datapoints you want to query.  **Example:** &#x60;pagename, pageid, namespace&#x60; (optional)
     * @param  int $limit The amount of results you want.  **Example:** &#x60;20&#x60; (optional)
     * @param  int $offset This can be used for pagination.  **Example:** &#x60;20&#x60; (optional)
     * @param  string $order The order you want your result in.  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $groupby What you want your results grouped by (this can be helpful when using aggregate functions).  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['placementGet'] to see the possible values for this operation
     *
     * @throws \Liquipedia\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Liquipedia\Client\Model\BroadcastersGet200Response|\Liquipedia\Client\Model\Error|\Liquipedia\Client\Model\Error|\Liquipedia\Client\Model\Error
     */
    public function placementGet($wiki, $conditions = null, $query = null, $limit = null, $offset = null, $order = null, $groupby = null, string $contentType = self::contentTypes['placementGet'][0])
    {
        list($response) = $this->placementGetWithHttpInfo($wiki, $conditions, $query, $limit, $offset, $order, $groupby, $contentType);
        return $response;
    }

    /**
     * Operation placementGetWithHttpInfo
     *
     * Get placements
     *
     * @param  string $wiki The wikis you want data from. Pipe-separate multiple wikis for multiwiki requests.  **Example:** &#x60;dota2&#x60;, &#x60;dota2|counterstrike&#x60; (required)
     * @param  string $conditions The filters you want to apply to the request.  **Example:** &#x60;[[pagename::Some/Liquipedia/Page]] AND [[namespace::0]]&#x60; (optional)
     * @param  string $query The datapoints you want to query.  **Example:** &#x60;pagename, pageid, namespace&#x60; (optional)
     * @param  int $limit The amount of results you want.  **Example:** &#x60;20&#x60; (optional)
     * @param  int $offset This can be used for pagination.  **Example:** &#x60;20&#x60; (optional)
     * @param  string $order The order you want your result in.  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $groupby What you want your results grouped by (this can be helpful when using aggregate functions).  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['placementGet'] to see the possible values for this operation
     *
     * @throws \Liquipedia\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Liquipedia\Client\Model\BroadcastersGet200Response|\Liquipedia\Client\Model\Error|\Liquipedia\Client\Model\Error|\Liquipedia\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function placementGetWithHttpInfo($wiki, $conditions = null, $query = null, $limit = null, $offset = null, $order = null, $groupby = null, string $contentType = self::contentTypes['placementGet'][0])
    {
        $request = $this->placementGetRequest($wiki, $conditions, $query, $limit, $offset, $order, $groupby, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Liquipedia\Client\Model\BroadcastersGet200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Liquipedia\Client\Model\BroadcastersGet200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Liquipedia\Client\Model\BroadcastersGet200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Liquipedia\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Liquipedia\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Liquipedia\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Liquipedia\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Liquipedia\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Liquipedia\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Liquipedia\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Liquipedia\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Liquipedia\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Liquipedia\Client\Model\BroadcastersGet200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Liquipedia\Client\Model\BroadcastersGet200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Liquipedia\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Liquipedia\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Liquipedia\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation placementGetAsync
     *
     * Get placements
     *
     * @param  string $wiki The wikis you want data from. Pipe-separate multiple wikis for multiwiki requests.  **Example:** &#x60;dota2&#x60;, &#x60;dota2|counterstrike&#x60; (required)
     * @param  string $conditions The filters you want to apply to the request.  **Example:** &#x60;[[pagename::Some/Liquipedia/Page]] AND [[namespace::0]]&#x60; (optional)
     * @param  string $query The datapoints you want to query.  **Example:** &#x60;pagename, pageid, namespace&#x60; (optional)
     * @param  int $limit The amount of results you want.  **Example:** &#x60;20&#x60; (optional)
     * @param  int $offset This can be used for pagination.  **Example:** &#x60;20&#x60; (optional)
     * @param  string $order The order you want your result in.  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $groupby What you want your results grouped by (this can be helpful when using aggregate functions).  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['placementGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function placementGetAsync($wiki, $conditions = null, $query = null, $limit = null, $offset = null, $order = null, $groupby = null, string $contentType = self::contentTypes['placementGet'][0])
    {
        return $this->placementGetAsyncWithHttpInfo($wiki, $conditions, $query, $limit, $offset, $order, $groupby, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation placementGetAsyncWithHttpInfo
     *
     * Get placements
     *
     * @param  string $wiki The wikis you want data from. Pipe-separate multiple wikis for multiwiki requests.  **Example:** &#x60;dota2&#x60;, &#x60;dota2|counterstrike&#x60; (required)
     * @param  string $conditions The filters you want to apply to the request.  **Example:** &#x60;[[pagename::Some/Liquipedia/Page]] AND [[namespace::0]]&#x60; (optional)
     * @param  string $query The datapoints you want to query.  **Example:** &#x60;pagename, pageid, namespace&#x60; (optional)
     * @param  int $limit The amount of results you want.  **Example:** &#x60;20&#x60; (optional)
     * @param  int $offset This can be used for pagination.  **Example:** &#x60;20&#x60; (optional)
     * @param  string $order The order you want your result in.  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $groupby What you want your results grouped by (this can be helpful when using aggregate functions).  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['placementGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function placementGetAsyncWithHttpInfo($wiki, $conditions = null, $query = null, $limit = null, $offset = null, $order = null, $groupby = null, string $contentType = self::contentTypes['placementGet'][0])
    {
        $returnType = '\Liquipedia\Client\Model\BroadcastersGet200Response';
        $request = $this->placementGetRequest($wiki, $conditions, $query, $limit, $offset, $order, $groupby, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'placementGet'
     *
     * @param  string $wiki The wikis you want data from. Pipe-separate multiple wikis for multiwiki requests.  **Example:** &#x60;dota2&#x60;, &#x60;dota2|counterstrike&#x60; (required)
     * @param  string $conditions The filters you want to apply to the request.  **Example:** &#x60;[[pagename::Some/Liquipedia/Page]] AND [[namespace::0]]&#x60; (optional)
     * @param  string $query The datapoints you want to query.  **Example:** &#x60;pagename, pageid, namespace&#x60; (optional)
     * @param  int $limit The amount of results you want.  **Example:** &#x60;20&#x60; (optional)
     * @param  int $offset This can be used for pagination.  **Example:** &#x60;20&#x60; (optional)
     * @param  string $order The order you want your result in.  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $groupby What you want your results grouped by (this can be helpful when using aggregate functions).  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['placementGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function placementGetRequest($wiki, $conditions = null, $query = null, $limit = null, $offset = null, $order = null, $groupby = null, string $contentType = self::contentTypes['placementGet'][0])
    {

        // verify the required parameter 'wiki' is set
        if ($wiki === null || (is_array($wiki) && count($wiki) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $wiki when calling placementGet'
            );
        }








        $resourcePath = '/placement';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $wiki,
            'wiki', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $conditions,
            'conditions', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $query,
            'query', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order,
            'order', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $groupby,
            'groupby', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('authorization');
        if ($apiKey !== null) {
            $headers['authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation playerGet
     *
     * Get players
     *
     * @param  string $wiki The wikis you want data from. Pipe-separate multiple wikis for multiwiki requests.  **Example:** &#x60;dota2&#x60;, &#x60;dota2|counterstrike&#x60; (required)
     * @param  string $conditions The filters you want to apply to the request.  **Example:** &#x60;[[pagename::Some/Liquipedia/Page]] AND [[namespace::0]]&#x60; (optional)
     * @param  string $query The datapoints you want to query.  **Example:** &#x60;pagename, pageid, namespace&#x60; (optional)
     * @param  int $limit The amount of results you want.  **Example:** &#x60;20&#x60; (optional)
     * @param  int $offset This can be used for pagination.  **Example:** &#x60;20&#x60; (optional)
     * @param  string $order The order you want your result in.  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $groupby What you want your results grouped by (this can be helpful when using aggregate functions).  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['playerGet'] to see the possible values for this operation
     *
     * @throws \Liquipedia\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Liquipedia\Client\Model\BroadcastersGet200Response|\Liquipedia\Client\Model\Error|\Liquipedia\Client\Model\Error|\Liquipedia\Client\Model\Error
     */
    public function playerGet($wiki, $conditions = null, $query = null, $limit = null, $offset = null, $order = null, $groupby = null, string $contentType = self::contentTypes['playerGet'][0])
    {
        list($response) = $this->playerGetWithHttpInfo($wiki, $conditions, $query, $limit, $offset, $order, $groupby, $contentType);
        return $response;
    }

    /**
     * Operation playerGetWithHttpInfo
     *
     * Get players
     *
     * @param  string $wiki The wikis you want data from. Pipe-separate multiple wikis for multiwiki requests.  **Example:** &#x60;dota2&#x60;, &#x60;dota2|counterstrike&#x60; (required)
     * @param  string $conditions The filters you want to apply to the request.  **Example:** &#x60;[[pagename::Some/Liquipedia/Page]] AND [[namespace::0]]&#x60; (optional)
     * @param  string $query The datapoints you want to query.  **Example:** &#x60;pagename, pageid, namespace&#x60; (optional)
     * @param  int $limit The amount of results you want.  **Example:** &#x60;20&#x60; (optional)
     * @param  int $offset This can be used for pagination.  **Example:** &#x60;20&#x60; (optional)
     * @param  string $order The order you want your result in.  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $groupby What you want your results grouped by (this can be helpful when using aggregate functions).  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['playerGet'] to see the possible values for this operation
     *
     * @throws \Liquipedia\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Liquipedia\Client\Model\BroadcastersGet200Response|\Liquipedia\Client\Model\Error|\Liquipedia\Client\Model\Error|\Liquipedia\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function playerGetWithHttpInfo($wiki, $conditions = null, $query = null, $limit = null, $offset = null, $order = null, $groupby = null, string $contentType = self::contentTypes['playerGet'][0])
    {
        $request = $this->playerGetRequest($wiki, $conditions, $query, $limit, $offset, $order, $groupby, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Liquipedia\Client\Model\BroadcastersGet200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Liquipedia\Client\Model\BroadcastersGet200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Liquipedia\Client\Model\BroadcastersGet200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Liquipedia\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Liquipedia\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Liquipedia\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Liquipedia\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Liquipedia\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Liquipedia\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Liquipedia\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Liquipedia\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Liquipedia\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Liquipedia\Client\Model\BroadcastersGet200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Liquipedia\Client\Model\BroadcastersGet200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Liquipedia\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Liquipedia\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Liquipedia\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation playerGetAsync
     *
     * Get players
     *
     * @param  string $wiki The wikis you want data from. Pipe-separate multiple wikis for multiwiki requests.  **Example:** &#x60;dota2&#x60;, &#x60;dota2|counterstrike&#x60; (required)
     * @param  string $conditions The filters you want to apply to the request.  **Example:** &#x60;[[pagename::Some/Liquipedia/Page]] AND [[namespace::0]]&#x60; (optional)
     * @param  string $query The datapoints you want to query.  **Example:** &#x60;pagename, pageid, namespace&#x60; (optional)
     * @param  int $limit The amount of results you want.  **Example:** &#x60;20&#x60; (optional)
     * @param  int $offset This can be used for pagination.  **Example:** &#x60;20&#x60; (optional)
     * @param  string $order The order you want your result in.  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $groupby What you want your results grouped by (this can be helpful when using aggregate functions).  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['playerGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function playerGetAsync($wiki, $conditions = null, $query = null, $limit = null, $offset = null, $order = null, $groupby = null, string $contentType = self::contentTypes['playerGet'][0])
    {
        return $this->playerGetAsyncWithHttpInfo($wiki, $conditions, $query, $limit, $offset, $order, $groupby, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation playerGetAsyncWithHttpInfo
     *
     * Get players
     *
     * @param  string $wiki The wikis you want data from. Pipe-separate multiple wikis for multiwiki requests.  **Example:** &#x60;dota2&#x60;, &#x60;dota2|counterstrike&#x60; (required)
     * @param  string $conditions The filters you want to apply to the request.  **Example:** &#x60;[[pagename::Some/Liquipedia/Page]] AND [[namespace::0]]&#x60; (optional)
     * @param  string $query The datapoints you want to query.  **Example:** &#x60;pagename, pageid, namespace&#x60; (optional)
     * @param  int $limit The amount of results you want.  **Example:** &#x60;20&#x60; (optional)
     * @param  int $offset This can be used for pagination.  **Example:** &#x60;20&#x60; (optional)
     * @param  string $order The order you want your result in.  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $groupby What you want your results grouped by (this can be helpful when using aggregate functions).  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['playerGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function playerGetAsyncWithHttpInfo($wiki, $conditions = null, $query = null, $limit = null, $offset = null, $order = null, $groupby = null, string $contentType = self::contentTypes['playerGet'][0])
    {
        $returnType = '\Liquipedia\Client\Model\BroadcastersGet200Response';
        $request = $this->playerGetRequest($wiki, $conditions, $query, $limit, $offset, $order, $groupby, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'playerGet'
     *
     * @param  string $wiki The wikis you want data from. Pipe-separate multiple wikis for multiwiki requests.  **Example:** &#x60;dota2&#x60;, &#x60;dota2|counterstrike&#x60; (required)
     * @param  string $conditions The filters you want to apply to the request.  **Example:** &#x60;[[pagename::Some/Liquipedia/Page]] AND [[namespace::0]]&#x60; (optional)
     * @param  string $query The datapoints you want to query.  **Example:** &#x60;pagename, pageid, namespace&#x60; (optional)
     * @param  int $limit The amount of results you want.  **Example:** &#x60;20&#x60; (optional)
     * @param  int $offset This can be used for pagination.  **Example:** &#x60;20&#x60; (optional)
     * @param  string $order The order you want your result in.  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $groupby What you want your results grouped by (this can be helpful when using aggregate functions).  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['playerGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function playerGetRequest($wiki, $conditions = null, $query = null, $limit = null, $offset = null, $order = null, $groupby = null, string $contentType = self::contentTypes['playerGet'][0])
    {

        // verify the required parameter 'wiki' is set
        if ($wiki === null || (is_array($wiki) && count($wiki) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $wiki when calling playerGet'
            );
        }








        $resourcePath = '/player';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $wiki,
            'wiki', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $conditions,
            'conditions', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $query,
            'query', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order,
            'order', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $groupby,
            'groupby', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('authorization');
        if ($apiKey !== null) {
            $headers['authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation seriesGet
     *
     * Get series
     *
     * @param  string $wiki The wikis you want data from. Pipe-separate multiple wikis for multiwiki requests.  **Example:** &#x60;dota2&#x60;, &#x60;dota2|counterstrike&#x60; (required)
     * @param  string $conditions The filters you want to apply to the request.  **Example:** &#x60;[[pagename::Some/Liquipedia/Page]] AND [[namespace::0]]&#x60; (optional)
     * @param  string $query The datapoints you want to query.  **Example:** &#x60;pagename, pageid, namespace&#x60; (optional)
     * @param  int $limit The amount of results you want.  **Example:** &#x60;20&#x60; (optional)
     * @param  int $offset This can be used for pagination.  **Example:** &#x60;20&#x60; (optional)
     * @param  string $order The order you want your result in.  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $groupby What you want your results grouped by (this can be helpful when using aggregate functions).  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['seriesGet'] to see the possible values for this operation
     *
     * @throws \Liquipedia\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Liquipedia\Client\Model\BroadcastersGet200Response|\Liquipedia\Client\Model\Error|\Liquipedia\Client\Model\Error|\Liquipedia\Client\Model\Error
     */
    public function seriesGet($wiki, $conditions = null, $query = null, $limit = null, $offset = null, $order = null, $groupby = null, string $contentType = self::contentTypes['seriesGet'][0])
    {
        list($response) = $this->seriesGetWithHttpInfo($wiki, $conditions, $query, $limit, $offset, $order, $groupby, $contentType);
        return $response;
    }

    /**
     * Operation seriesGetWithHttpInfo
     *
     * Get series
     *
     * @param  string $wiki The wikis you want data from. Pipe-separate multiple wikis for multiwiki requests.  **Example:** &#x60;dota2&#x60;, &#x60;dota2|counterstrike&#x60; (required)
     * @param  string $conditions The filters you want to apply to the request.  **Example:** &#x60;[[pagename::Some/Liquipedia/Page]] AND [[namespace::0]]&#x60; (optional)
     * @param  string $query The datapoints you want to query.  **Example:** &#x60;pagename, pageid, namespace&#x60; (optional)
     * @param  int $limit The amount of results you want.  **Example:** &#x60;20&#x60; (optional)
     * @param  int $offset This can be used for pagination.  **Example:** &#x60;20&#x60; (optional)
     * @param  string $order The order you want your result in.  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $groupby What you want your results grouped by (this can be helpful when using aggregate functions).  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['seriesGet'] to see the possible values for this operation
     *
     * @throws \Liquipedia\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Liquipedia\Client\Model\BroadcastersGet200Response|\Liquipedia\Client\Model\Error|\Liquipedia\Client\Model\Error|\Liquipedia\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function seriesGetWithHttpInfo($wiki, $conditions = null, $query = null, $limit = null, $offset = null, $order = null, $groupby = null, string $contentType = self::contentTypes['seriesGet'][0])
    {
        $request = $this->seriesGetRequest($wiki, $conditions, $query, $limit, $offset, $order, $groupby, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Liquipedia\Client\Model\BroadcastersGet200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Liquipedia\Client\Model\BroadcastersGet200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Liquipedia\Client\Model\BroadcastersGet200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Liquipedia\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Liquipedia\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Liquipedia\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Liquipedia\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Liquipedia\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Liquipedia\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Liquipedia\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Liquipedia\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Liquipedia\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Liquipedia\Client\Model\BroadcastersGet200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Liquipedia\Client\Model\BroadcastersGet200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Liquipedia\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Liquipedia\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Liquipedia\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation seriesGetAsync
     *
     * Get series
     *
     * @param  string $wiki The wikis you want data from. Pipe-separate multiple wikis for multiwiki requests.  **Example:** &#x60;dota2&#x60;, &#x60;dota2|counterstrike&#x60; (required)
     * @param  string $conditions The filters you want to apply to the request.  **Example:** &#x60;[[pagename::Some/Liquipedia/Page]] AND [[namespace::0]]&#x60; (optional)
     * @param  string $query The datapoints you want to query.  **Example:** &#x60;pagename, pageid, namespace&#x60; (optional)
     * @param  int $limit The amount of results you want.  **Example:** &#x60;20&#x60; (optional)
     * @param  int $offset This can be used for pagination.  **Example:** &#x60;20&#x60; (optional)
     * @param  string $order The order you want your result in.  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $groupby What you want your results grouped by (this can be helpful when using aggregate functions).  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['seriesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function seriesGetAsync($wiki, $conditions = null, $query = null, $limit = null, $offset = null, $order = null, $groupby = null, string $contentType = self::contentTypes['seriesGet'][0])
    {
        return $this->seriesGetAsyncWithHttpInfo($wiki, $conditions, $query, $limit, $offset, $order, $groupby, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation seriesGetAsyncWithHttpInfo
     *
     * Get series
     *
     * @param  string $wiki The wikis you want data from. Pipe-separate multiple wikis for multiwiki requests.  **Example:** &#x60;dota2&#x60;, &#x60;dota2|counterstrike&#x60; (required)
     * @param  string $conditions The filters you want to apply to the request.  **Example:** &#x60;[[pagename::Some/Liquipedia/Page]] AND [[namespace::0]]&#x60; (optional)
     * @param  string $query The datapoints you want to query.  **Example:** &#x60;pagename, pageid, namespace&#x60; (optional)
     * @param  int $limit The amount of results you want.  **Example:** &#x60;20&#x60; (optional)
     * @param  int $offset This can be used for pagination.  **Example:** &#x60;20&#x60; (optional)
     * @param  string $order The order you want your result in.  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $groupby What you want your results grouped by (this can be helpful when using aggregate functions).  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['seriesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function seriesGetAsyncWithHttpInfo($wiki, $conditions = null, $query = null, $limit = null, $offset = null, $order = null, $groupby = null, string $contentType = self::contentTypes['seriesGet'][0])
    {
        $returnType = '\Liquipedia\Client\Model\BroadcastersGet200Response';
        $request = $this->seriesGetRequest($wiki, $conditions, $query, $limit, $offset, $order, $groupby, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'seriesGet'
     *
     * @param  string $wiki The wikis you want data from. Pipe-separate multiple wikis for multiwiki requests.  **Example:** &#x60;dota2&#x60;, &#x60;dota2|counterstrike&#x60; (required)
     * @param  string $conditions The filters you want to apply to the request.  **Example:** &#x60;[[pagename::Some/Liquipedia/Page]] AND [[namespace::0]]&#x60; (optional)
     * @param  string $query The datapoints you want to query.  **Example:** &#x60;pagename, pageid, namespace&#x60; (optional)
     * @param  int $limit The amount of results you want.  **Example:** &#x60;20&#x60; (optional)
     * @param  int $offset This can be used for pagination.  **Example:** &#x60;20&#x60; (optional)
     * @param  string $order The order you want your result in.  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $groupby What you want your results grouped by (this can be helpful when using aggregate functions).  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['seriesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function seriesGetRequest($wiki, $conditions = null, $query = null, $limit = null, $offset = null, $order = null, $groupby = null, string $contentType = self::contentTypes['seriesGet'][0])
    {

        // verify the required parameter 'wiki' is set
        if ($wiki === null || (is_array($wiki) && count($wiki) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $wiki when calling seriesGet'
            );
        }








        $resourcePath = '/series';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $wiki,
            'wiki', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $conditions,
            'conditions', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $query,
            'query', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order,
            'order', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $groupby,
            'groupby', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('authorization');
        if ($apiKey !== null) {
            $headers['authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation squadplayerGet
     *
     * Get squadplayer
     *
     * @param  string $wiki The wikis you want data from. Pipe-separate multiple wikis for multiwiki requests.  **Example:** &#x60;dota2&#x60;, &#x60;dota2|counterstrike&#x60; (required)
     * @param  string $conditions The filters you want to apply to the request.  **Example:** &#x60;[[pagename::Some/Liquipedia/Page]] AND [[namespace::0]]&#x60; (optional)
     * @param  string $query The datapoints you want to query.  **Example:** &#x60;pagename, pageid, namespace&#x60; (optional)
     * @param  int $limit The amount of results you want.  **Example:** &#x60;20&#x60; (optional)
     * @param  int $offset This can be used for pagination.  **Example:** &#x60;20&#x60; (optional)
     * @param  string $order The order you want your result in.  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $groupby What you want your results grouped by (this can be helpful when using aggregate functions).  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['squadplayerGet'] to see the possible values for this operation
     *
     * @throws \Liquipedia\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Liquipedia\Client\Model\BroadcastersGet200Response|\Liquipedia\Client\Model\Error|\Liquipedia\Client\Model\Error|\Liquipedia\Client\Model\Error
     */
    public function squadplayerGet($wiki, $conditions = null, $query = null, $limit = null, $offset = null, $order = null, $groupby = null, string $contentType = self::contentTypes['squadplayerGet'][0])
    {
        list($response) = $this->squadplayerGetWithHttpInfo($wiki, $conditions, $query, $limit, $offset, $order, $groupby, $contentType);
        return $response;
    }

    /**
     * Operation squadplayerGetWithHttpInfo
     *
     * Get squadplayer
     *
     * @param  string $wiki The wikis you want data from. Pipe-separate multiple wikis for multiwiki requests.  **Example:** &#x60;dota2&#x60;, &#x60;dota2|counterstrike&#x60; (required)
     * @param  string $conditions The filters you want to apply to the request.  **Example:** &#x60;[[pagename::Some/Liquipedia/Page]] AND [[namespace::0]]&#x60; (optional)
     * @param  string $query The datapoints you want to query.  **Example:** &#x60;pagename, pageid, namespace&#x60; (optional)
     * @param  int $limit The amount of results you want.  **Example:** &#x60;20&#x60; (optional)
     * @param  int $offset This can be used for pagination.  **Example:** &#x60;20&#x60; (optional)
     * @param  string $order The order you want your result in.  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $groupby What you want your results grouped by (this can be helpful when using aggregate functions).  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['squadplayerGet'] to see the possible values for this operation
     *
     * @throws \Liquipedia\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Liquipedia\Client\Model\BroadcastersGet200Response|\Liquipedia\Client\Model\Error|\Liquipedia\Client\Model\Error|\Liquipedia\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function squadplayerGetWithHttpInfo($wiki, $conditions = null, $query = null, $limit = null, $offset = null, $order = null, $groupby = null, string $contentType = self::contentTypes['squadplayerGet'][0])
    {
        $request = $this->squadplayerGetRequest($wiki, $conditions, $query, $limit, $offset, $order, $groupby, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Liquipedia\Client\Model\BroadcastersGet200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Liquipedia\Client\Model\BroadcastersGet200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Liquipedia\Client\Model\BroadcastersGet200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Liquipedia\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Liquipedia\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Liquipedia\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Liquipedia\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Liquipedia\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Liquipedia\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Liquipedia\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Liquipedia\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Liquipedia\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Liquipedia\Client\Model\BroadcastersGet200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Liquipedia\Client\Model\BroadcastersGet200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Liquipedia\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Liquipedia\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Liquipedia\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation squadplayerGetAsync
     *
     * Get squadplayer
     *
     * @param  string $wiki The wikis you want data from. Pipe-separate multiple wikis for multiwiki requests.  **Example:** &#x60;dota2&#x60;, &#x60;dota2|counterstrike&#x60; (required)
     * @param  string $conditions The filters you want to apply to the request.  **Example:** &#x60;[[pagename::Some/Liquipedia/Page]] AND [[namespace::0]]&#x60; (optional)
     * @param  string $query The datapoints you want to query.  **Example:** &#x60;pagename, pageid, namespace&#x60; (optional)
     * @param  int $limit The amount of results you want.  **Example:** &#x60;20&#x60; (optional)
     * @param  int $offset This can be used for pagination.  **Example:** &#x60;20&#x60; (optional)
     * @param  string $order The order you want your result in.  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $groupby What you want your results grouped by (this can be helpful when using aggregate functions).  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['squadplayerGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function squadplayerGetAsync($wiki, $conditions = null, $query = null, $limit = null, $offset = null, $order = null, $groupby = null, string $contentType = self::contentTypes['squadplayerGet'][0])
    {
        return $this->squadplayerGetAsyncWithHttpInfo($wiki, $conditions, $query, $limit, $offset, $order, $groupby, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation squadplayerGetAsyncWithHttpInfo
     *
     * Get squadplayer
     *
     * @param  string $wiki The wikis you want data from. Pipe-separate multiple wikis for multiwiki requests.  **Example:** &#x60;dota2&#x60;, &#x60;dota2|counterstrike&#x60; (required)
     * @param  string $conditions The filters you want to apply to the request.  **Example:** &#x60;[[pagename::Some/Liquipedia/Page]] AND [[namespace::0]]&#x60; (optional)
     * @param  string $query The datapoints you want to query.  **Example:** &#x60;pagename, pageid, namespace&#x60; (optional)
     * @param  int $limit The amount of results you want.  **Example:** &#x60;20&#x60; (optional)
     * @param  int $offset This can be used for pagination.  **Example:** &#x60;20&#x60; (optional)
     * @param  string $order The order you want your result in.  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $groupby What you want your results grouped by (this can be helpful when using aggregate functions).  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['squadplayerGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function squadplayerGetAsyncWithHttpInfo($wiki, $conditions = null, $query = null, $limit = null, $offset = null, $order = null, $groupby = null, string $contentType = self::contentTypes['squadplayerGet'][0])
    {
        $returnType = '\Liquipedia\Client\Model\BroadcastersGet200Response';
        $request = $this->squadplayerGetRequest($wiki, $conditions, $query, $limit, $offset, $order, $groupby, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'squadplayerGet'
     *
     * @param  string $wiki The wikis you want data from. Pipe-separate multiple wikis for multiwiki requests.  **Example:** &#x60;dota2&#x60;, &#x60;dota2|counterstrike&#x60; (required)
     * @param  string $conditions The filters you want to apply to the request.  **Example:** &#x60;[[pagename::Some/Liquipedia/Page]] AND [[namespace::0]]&#x60; (optional)
     * @param  string $query The datapoints you want to query.  **Example:** &#x60;pagename, pageid, namespace&#x60; (optional)
     * @param  int $limit The amount of results you want.  **Example:** &#x60;20&#x60; (optional)
     * @param  int $offset This can be used for pagination.  **Example:** &#x60;20&#x60; (optional)
     * @param  string $order The order you want your result in.  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $groupby What you want your results grouped by (this can be helpful when using aggregate functions).  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['squadplayerGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function squadplayerGetRequest($wiki, $conditions = null, $query = null, $limit = null, $offset = null, $order = null, $groupby = null, string $contentType = self::contentTypes['squadplayerGet'][0])
    {

        // verify the required parameter 'wiki' is set
        if ($wiki === null || (is_array($wiki) && count($wiki) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $wiki when calling squadplayerGet'
            );
        }








        $resourcePath = '/squadplayer';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $wiki,
            'wiki', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $conditions,
            'conditions', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $query,
            'query', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order,
            'order', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $groupby,
            'groupby', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('authorization');
        if ($apiKey !== null) {
            $headers['authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation standingsentryGet
     *
     * Get standing
     *
     * @param  string $wiki The wikis you want data from. Pipe-separate multiple wikis for multiwiki requests.  **Example:** &#x60;dota2&#x60;, &#x60;dota2|counterstrike&#x60; (required)
     * @param  string $conditions The filters you want to apply to the request.  **Example:** &#x60;[[pagename::Some/Liquipedia/Page]] AND [[namespace::0]]&#x60; (optional)
     * @param  string $query The datapoints you want to query.  **Example:** &#x60;pagename, pageid, namespace&#x60; (optional)
     * @param  int $limit The amount of results you want.  **Example:** &#x60;20&#x60; (optional)
     * @param  int $offset This can be used for pagination.  **Example:** &#x60;20&#x60; (optional)
     * @param  string $order The order you want your result in.  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $groupby What you want your results grouped by (this can be helpful when using aggregate functions).  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['standingsentryGet'] to see the possible values for this operation
     *
     * @throws \Liquipedia\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Liquipedia\Client\Model\BroadcastersGet200Response|\Liquipedia\Client\Model\Error|\Liquipedia\Client\Model\Error|\Liquipedia\Client\Model\Error
     */
    public function standingsentryGet($wiki, $conditions = null, $query = null, $limit = null, $offset = null, $order = null, $groupby = null, string $contentType = self::contentTypes['standingsentryGet'][0])
    {
        list($response) = $this->standingsentryGetWithHttpInfo($wiki, $conditions, $query, $limit, $offset, $order, $groupby, $contentType);
        return $response;
    }

    /**
     * Operation standingsentryGetWithHttpInfo
     *
     * Get standing
     *
     * @param  string $wiki The wikis you want data from. Pipe-separate multiple wikis for multiwiki requests.  **Example:** &#x60;dota2&#x60;, &#x60;dota2|counterstrike&#x60; (required)
     * @param  string $conditions The filters you want to apply to the request.  **Example:** &#x60;[[pagename::Some/Liquipedia/Page]] AND [[namespace::0]]&#x60; (optional)
     * @param  string $query The datapoints you want to query.  **Example:** &#x60;pagename, pageid, namespace&#x60; (optional)
     * @param  int $limit The amount of results you want.  **Example:** &#x60;20&#x60; (optional)
     * @param  int $offset This can be used for pagination.  **Example:** &#x60;20&#x60; (optional)
     * @param  string $order The order you want your result in.  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $groupby What you want your results grouped by (this can be helpful when using aggregate functions).  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['standingsentryGet'] to see the possible values for this operation
     *
     * @throws \Liquipedia\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Liquipedia\Client\Model\BroadcastersGet200Response|\Liquipedia\Client\Model\Error|\Liquipedia\Client\Model\Error|\Liquipedia\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function standingsentryGetWithHttpInfo($wiki, $conditions = null, $query = null, $limit = null, $offset = null, $order = null, $groupby = null, string $contentType = self::contentTypes['standingsentryGet'][0])
    {
        $request = $this->standingsentryGetRequest($wiki, $conditions, $query, $limit, $offset, $order, $groupby, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Liquipedia\Client\Model\BroadcastersGet200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Liquipedia\Client\Model\BroadcastersGet200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Liquipedia\Client\Model\BroadcastersGet200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Liquipedia\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Liquipedia\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Liquipedia\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Liquipedia\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Liquipedia\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Liquipedia\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Liquipedia\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Liquipedia\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Liquipedia\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Liquipedia\Client\Model\BroadcastersGet200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Liquipedia\Client\Model\BroadcastersGet200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Liquipedia\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Liquipedia\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Liquipedia\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation standingsentryGetAsync
     *
     * Get standing
     *
     * @param  string $wiki The wikis you want data from. Pipe-separate multiple wikis for multiwiki requests.  **Example:** &#x60;dota2&#x60;, &#x60;dota2|counterstrike&#x60; (required)
     * @param  string $conditions The filters you want to apply to the request.  **Example:** &#x60;[[pagename::Some/Liquipedia/Page]] AND [[namespace::0]]&#x60; (optional)
     * @param  string $query The datapoints you want to query.  **Example:** &#x60;pagename, pageid, namespace&#x60; (optional)
     * @param  int $limit The amount of results you want.  **Example:** &#x60;20&#x60; (optional)
     * @param  int $offset This can be used for pagination.  **Example:** &#x60;20&#x60; (optional)
     * @param  string $order The order you want your result in.  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $groupby What you want your results grouped by (this can be helpful when using aggregate functions).  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['standingsentryGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function standingsentryGetAsync($wiki, $conditions = null, $query = null, $limit = null, $offset = null, $order = null, $groupby = null, string $contentType = self::contentTypes['standingsentryGet'][0])
    {
        return $this->standingsentryGetAsyncWithHttpInfo($wiki, $conditions, $query, $limit, $offset, $order, $groupby, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation standingsentryGetAsyncWithHttpInfo
     *
     * Get standing
     *
     * @param  string $wiki The wikis you want data from. Pipe-separate multiple wikis for multiwiki requests.  **Example:** &#x60;dota2&#x60;, &#x60;dota2|counterstrike&#x60; (required)
     * @param  string $conditions The filters you want to apply to the request.  **Example:** &#x60;[[pagename::Some/Liquipedia/Page]] AND [[namespace::0]]&#x60; (optional)
     * @param  string $query The datapoints you want to query.  **Example:** &#x60;pagename, pageid, namespace&#x60; (optional)
     * @param  int $limit The amount of results you want.  **Example:** &#x60;20&#x60; (optional)
     * @param  int $offset This can be used for pagination.  **Example:** &#x60;20&#x60; (optional)
     * @param  string $order The order you want your result in.  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $groupby What you want your results grouped by (this can be helpful when using aggregate functions).  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['standingsentryGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function standingsentryGetAsyncWithHttpInfo($wiki, $conditions = null, $query = null, $limit = null, $offset = null, $order = null, $groupby = null, string $contentType = self::contentTypes['standingsentryGet'][0])
    {
        $returnType = '\Liquipedia\Client\Model\BroadcastersGet200Response';
        $request = $this->standingsentryGetRequest($wiki, $conditions, $query, $limit, $offset, $order, $groupby, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'standingsentryGet'
     *
     * @param  string $wiki The wikis you want data from. Pipe-separate multiple wikis for multiwiki requests.  **Example:** &#x60;dota2&#x60;, &#x60;dota2|counterstrike&#x60; (required)
     * @param  string $conditions The filters you want to apply to the request.  **Example:** &#x60;[[pagename::Some/Liquipedia/Page]] AND [[namespace::0]]&#x60; (optional)
     * @param  string $query The datapoints you want to query.  **Example:** &#x60;pagename, pageid, namespace&#x60; (optional)
     * @param  int $limit The amount of results you want.  **Example:** &#x60;20&#x60; (optional)
     * @param  int $offset This can be used for pagination.  **Example:** &#x60;20&#x60; (optional)
     * @param  string $order The order you want your result in.  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $groupby What you want your results grouped by (this can be helpful when using aggregate functions).  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['standingsentryGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function standingsentryGetRequest($wiki, $conditions = null, $query = null, $limit = null, $offset = null, $order = null, $groupby = null, string $contentType = self::contentTypes['standingsentryGet'][0])
    {

        // verify the required parameter 'wiki' is set
        if ($wiki === null || (is_array($wiki) && count($wiki) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $wiki when calling standingsentryGet'
            );
        }








        $resourcePath = '/standingsentry';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $wiki,
            'wiki', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $conditions,
            'conditions', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $query,
            'query', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order,
            'order', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $groupby,
            'groupby', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('authorization');
        if ($apiKey !== null) {
            $headers['authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation standingstableGet
     *
     * Get standing
     *
     * @param  string $wiki The wikis you want data from. Pipe-separate multiple wikis for multiwiki requests.  **Example:** &#x60;dota2&#x60;, &#x60;dota2|counterstrike&#x60; (required)
     * @param  string $conditions The filters you want to apply to the request.  **Example:** &#x60;[[pagename::Some/Liquipedia/Page]] AND [[namespace::0]]&#x60; (optional)
     * @param  string $query The datapoints you want to query.  **Example:** &#x60;pagename, pageid, namespace&#x60; (optional)
     * @param  int $limit The amount of results you want.  **Example:** &#x60;20&#x60; (optional)
     * @param  int $offset This can be used for pagination.  **Example:** &#x60;20&#x60; (optional)
     * @param  string $order The order you want your result in.  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $groupby What you want your results grouped by (this can be helpful when using aggregate functions).  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['standingstableGet'] to see the possible values for this operation
     *
     * @throws \Liquipedia\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Liquipedia\Client\Model\BroadcastersGet200Response|\Liquipedia\Client\Model\Error|\Liquipedia\Client\Model\Error|\Liquipedia\Client\Model\Error
     */
    public function standingstableGet($wiki, $conditions = null, $query = null, $limit = null, $offset = null, $order = null, $groupby = null, string $contentType = self::contentTypes['standingstableGet'][0])
    {
        list($response) = $this->standingstableGetWithHttpInfo($wiki, $conditions, $query, $limit, $offset, $order, $groupby, $contentType);
        return $response;
    }

    /**
     * Operation standingstableGetWithHttpInfo
     *
     * Get standing
     *
     * @param  string $wiki The wikis you want data from. Pipe-separate multiple wikis for multiwiki requests.  **Example:** &#x60;dota2&#x60;, &#x60;dota2|counterstrike&#x60; (required)
     * @param  string $conditions The filters you want to apply to the request.  **Example:** &#x60;[[pagename::Some/Liquipedia/Page]] AND [[namespace::0]]&#x60; (optional)
     * @param  string $query The datapoints you want to query.  **Example:** &#x60;pagename, pageid, namespace&#x60; (optional)
     * @param  int $limit The amount of results you want.  **Example:** &#x60;20&#x60; (optional)
     * @param  int $offset This can be used for pagination.  **Example:** &#x60;20&#x60; (optional)
     * @param  string $order The order you want your result in.  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $groupby What you want your results grouped by (this can be helpful when using aggregate functions).  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['standingstableGet'] to see the possible values for this operation
     *
     * @throws \Liquipedia\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Liquipedia\Client\Model\BroadcastersGet200Response|\Liquipedia\Client\Model\Error|\Liquipedia\Client\Model\Error|\Liquipedia\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function standingstableGetWithHttpInfo($wiki, $conditions = null, $query = null, $limit = null, $offset = null, $order = null, $groupby = null, string $contentType = self::contentTypes['standingstableGet'][0])
    {
        $request = $this->standingstableGetRequest($wiki, $conditions, $query, $limit, $offset, $order, $groupby, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Liquipedia\Client\Model\BroadcastersGet200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Liquipedia\Client\Model\BroadcastersGet200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Liquipedia\Client\Model\BroadcastersGet200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Liquipedia\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Liquipedia\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Liquipedia\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Liquipedia\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Liquipedia\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Liquipedia\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Liquipedia\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Liquipedia\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Liquipedia\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Liquipedia\Client\Model\BroadcastersGet200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Liquipedia\Client\Model\BroadcastersGet200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Liquipedia\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Liquipedia\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Liquipedia\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation standingstableGetAsync
     *
     * Get standing
     *
     * @param  string $wiki The wikis you want data from. Pipe-separate multiple wikis for multiwiki requests.  **Example:** &#x60;dota2&#x60;, &#x60;dota2|counterstrike&#x60; (required)
     * @param  string $conditions The filters you want to apply to the request.  **Example:** &#x60;[[pagename::Some/Liquipedia/Page]] AND [[namespace::0]]&#x60; (optional)
     * @param  string $query The datapoints you want to query.  **Example:** &#x60;pagename, pageid, namespace&#x60; (optional)
     * @param  int $limit The amount of results you want.  **Example:** &#x60;20&#x60; (optional)
     * @param  int $offset This can be used for pagination.  **Example:** &#x60;20&#x60; (optional)
     * @param  string $order The order you want your result in.  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $groupby What you want your results grouped by (this can be helpful when using aggregate functions).  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['standingstableGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function standingstableGetAsync($wiki, $conditions = null, $query = null, $limit = null, $offset = null, $order = null, $groupby = null, string $contentType = self::contentTypes['standingstableGet'][0])
    {
        return $this->standingstableGetAsyncWithHttpInfo($wiki, $conditions, $query, $limit, $offset, $order, $groupby, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation standingstableGetAsyncWithHttpInfo
     *
     * Get standing
     *
     * @param  string $wiki The wikis you want data from. Pipe-separate multiple wikis for multiwiki requests.  **Example:** &#x60;dota2&#x60;, &#x60;dota2|counterstrike&#x60; (required)
     * @param  string $conditions The filters you want to apply to the request.  **Example:** &#x60;[[pagename::Some/Liquipedia/Page]] AND [[namespace::0]]&#x60; (optional)
     * @param  string $query The datapoints you want to query.  **Example:** &#x60;pagename, pageid, namespace&#x60; (optional)
     * @param  int $limit The amount of results you want.  **Example:** &#x60;20&#x60; (optional)
     * @param  int $offset This can be used for pagination.  **Example:** &#x60;20&#x60; (optional)
     * @param  string $order The order you want your result in.  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $groupby What you want your results grouped by (this can be helpful when using aggregate functions).  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['standingstableGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function standingstableGetAsyncWithHttpInfo($wiki, $conditions = null, $query = null, $limit = null, $offset = null, $order = null, $groupby = null, string $contentType = self::contentTypes['standingstableGet'][0])
    {
        $returnType = '\Liquipedia\Client\Model\BroadcastersGet200Response';
        $request = $this->standingstableGetRequest($wiki, $conditions, $query, $limit, $offset, $order, $groupby, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'standingstableGet'
     *
     * @param  string $wiki The wikis you want data from. Pipe-separate multiple wikis for multiwiki requests.  **Example:** &#x60;dota2&#x60;, &#x60;dota2|counterstrike&#x60; (required)
     * @param  string $conditions The filters you want to apply to the request.  **Example:** &#x60;[[pagename::Some/Liquipedia/Page]] AND [[namespace::0]]&#x60; (optional)
     * @param  string $query The datapoints you want to query.  **Example:** &#x60;pagename, pageid, namespace&#x60; (optional)
     * @param  int $limit The amount of results you want.  **Example:** &#x60;20&#x60; (optional)
     * @param  int $offset This can be used for pagination.  **Example:** &#x60;20&#x60; (optional)
     * @param  string $order The order you want your result in.  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $groupby What you want your results grouped by (this can be helpful when using aggregate functions).  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['standingstableGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function standingstableGetRequest($wiki, $conditions = null, $query = null, $limit = null, $offset = null, $order = null, $groupby = null, string $contentType = self::contentTypes['standingstableGet'][0])
    {

        // verify the required parameter 'wiki' is set
        if ($wiki === null || (is_array($wiki) && count($wiki) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $wiki when calling standingstableGet'
            );
        }








        $resourcePath = '/standingstable';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $wiki,
            'wiki', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $conditions,
            'conditions', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $query,
            'query', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order,
            'order', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $groupby,
            'groupby', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('authorization');
        if ($apiKey !== null) {
            $headers['authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation teamGet
     *
     * Get teams
     *
     * @param  string $wiki The wikis you want data from. Pipe-separate multiple wikis for multiwiki requests.  **Example:** &#x60;dota2&#x60;, &#x60;dota2|counterstrike&#x60; (required)
     * @param  string $conditions The filters you want to apply to the request.  **Example:** &#x60;[[pagename::Some/Liquipedia/Page]] AND [[namespace::0]]&#x60; (optional)
     * @param  string $query The datapoints you want to query.  **Example:** &#x60;pagename, pageid, namespace&#x60; (optional)
     * @param  int $limit The amount of results you want.  **Example:** &#x60;20&#x60; (optional)
     * @param  int $offset This can be used for pagination.  **Example:** &#x60;20&#x60; (optional)
     * @param  string $order The order you want your result in.  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $groupby What you want your results grouped by (this can be helpful when using aggregate functions).  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['teamGet'] to see the possible values for this operation
     *
     * @throws \Liquipedia\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Liquipedia\Client\Model\BroadcastersGet200Response|\Liquipedia\Client\Model\Error|\Liquipedia\Client\Model\Error|\Liquipedia\Client\Model\Error
     */
    public function teamGet($wiki, $conditions = null, $query = null, $limit = null, $offset = null, $order = null, $groupby = null, string $contentType = self::contentTypes['teamGet'][0])
    {
        list($response) = $this->teamGetWithHttpInfo($wiki, $conditions, $query, $limit, $offset, $order, $groupby, $contentType);
        return $response;
    }

    /**
     * Operation teamGetWithHttpInfo
     *
     * Get teams
     *
     * @param  string $wiki The wikis you want data from. Pipe-separate multiple wikis for multiwiki requests.  **Example:** &#x60;dota2&#x60;, &#x60;dota2|counterstrike&#x60; (required)
     * @param  string $conditions The filters you want to apply to the request.  **Example:** &#x60;[[pagename::Some/Liquipedia/Page]] AND [[namespace::0]]&#x60; (optional)
     * @param  string $query The datapoints you want to query.  **Example:** &#x60;pagename, pageid, namespace&#x60; (optional)
     * @param  int $limit The amount of results you want.  **Example:** &#x60;20&#x60; (optional)
     * @param  int $offset This can be used for pagination.  **Example:** &#x60;20&#x60; (optional)
     * @param  string $order The order you want your result in.  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $groupby What you want your results grouped by (this can be helpful when using aggregate functions).  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['teamGet'] to see the possible values for this operation
     *
     * @throws \Liquipedia\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Liquipedia\Client\Model\BroadcastersGet200Response|\Liquipedia\Client\Model\Error|\Liquipedia\Client\Model\Error|\Liquipedia\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function teamGetWithHttpInfo($wiki, $conditions = null, $query = null, $limit = null, $offset = null, $order = null, $groupby = null, string $contentType = self::contentTypes['teamGet'][0])
    {
        $request = $this->teamGetRequest($wiki, $conditions, $query, $limit, $offset, $order, $groupby, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Liquipedia\Client\Model\BroadcastersGet200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Liquipedia\Client\Model\BroadcastersGet200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Liquipedia\Client\Model\BroadcastersGet200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Liquipedia\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Liquipedia\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Liquipedia\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Liquipedia\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Liquipedia\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Liquipedia\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Liquipedia\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Liquipedia\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Liquipedia\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Liquipedia\Client\Model\BroadcastersGet200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Liquipedia\Client\Model\BroadcastersGet200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Liquipedia\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Liquipedia\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Liquipedia\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation teamGetAsync
     *
     * Get teams
     *
     * @param  string $wiki The wikis you want data from. Pipe-separate multiple wikis for multiwiki requests.  **Example:** &#x60;dota2&#x60;, &#x60;dota2|counterstrike&#x60; (required)
     * @param  string $conditions The filters you want to apply to the request.  **Example:** &#x60;[[pagename::Some/Liquipedia/Page]] AND [[namespace::0]]&#x60; (optional)
     * @param  string $query The datapoints you want to query.  **Example:** &#x60;pagename, pageid, namespace&#x60; (optional)
     * @param  int $limit The amount of results you want.  **Example:** &#x60;20&#x60; (optional)
     * @param  int $offset This can be used for pagination.  **Example:** &#x60;20&#x60; (optional)
     * @param  string $order The order you want your result in.  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $groupby What you want your results grouped by (this can be helpful when using aggregate functions).  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['teamGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function teamGetAsync($wiki, $conditions = null, $query = null, $limit = null, $offset = null, $order = null, $groupby = null, string $contentType = self::contentTypes['teamGet'][0])
    {
        return $this->teamGetAsyncWithHttpInfo($wiki, $conditions, $query, $limit, $offset, $order, $groupby, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation teamGetAsyncWithHttpInfo
     *
     * Get teams
     *
     * @param  string $wiki The wikis you want data from. Pipe-separate multiple wikis for multiwiki requests.  **Example:** &#x60;dota2&#x60;, &#x60;dota2|counterstrike&#x60; (required)
     * @param  string $conditions The filters you want to apply to the request.  **Example:** &#x60;[[pagename::Some/Liquipedia/Page]] AND [[namespace::0]]&#x60; (optional)
     * @param  string $query The datapoints you want to query.  **Example:** &#x60;pagename, pageid, namespace&#x60; (optional)
     * @param  int $limit The amount of results you want.  **Example:** &#x60;20&#x60; (optional)
     * @param  int $offset This can be used for pagination.  **Example:** &#x60;20&#x60; (optional)
     * @param  string $order The order you want your result in.  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $groupby What you want your results grouped by (this can be helpful when using aggregate functions).  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['teamGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function teamGetAsyncWithHttpInfo($wiki, $conditions = null, $query = null, $limit = null, $offset = null, $order = null, $groupby = null, string $contentType = self::contentTypes['teamGet'][0])
    {
        $returnType = '\Liquipedia\Client\Model\BroadcastersGet200Response';
        $request = $this->teamGetRequest($wiki, $conditions, $query, $limit, $offset, $order, $groupby, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'teamGet'
     *
     * @param  string $wiki The wikis you want data from. Pipe-separate multiple wikis for multiwiki requests.  **Example:** &#x60;dota2&#x60;, &#x60;dota2|counterstrike&#x60; (required)
     * @param  string $conditions The filters you want to apply to the request.  **Example:** &#x60;[[pagename::Some/Liquipedia/Page]] AND [[namespace::0]]&#x60; (optional)
     * @param  string $query The datapoints you want to query.  **Example:** &#x60;pagename, pageid, namespace&#x60; (optional)
     * @param  int $limit The amount of results you want.  **Example:** &#x60;20&#x60; (optional)
     * @param  int $offset This can be used for pagination.  **Example:** &#x60;20&#x60; (optional)
     * @param  string $order The order you want your result in.  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $groupby What you want your results grouped by (this can be helpful when using aggregate functions).  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['teamGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function teamGetRequest($wiki, $conditions = null, $query = null, $limit = null, $offset = null, $order = null, $groupby = null, string $contentType = self::contentTypes['teamGet'][0])
    {

        // verify the required parameter 'wiki' is set
        if ($wiki === null || (is_array($wiki) && count($wiki) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $wiki when calling teamGet'
            );
        }








        $resourcePath = '/team';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $wiki,
            'wiki', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $conditions,
            'conditions', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $query,
            'query', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order,
            'order', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $groupby,
            'groupby', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('authorization');
        if ($apiKey !== null) {
            $headers['authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation teamtemplateGet
     *
     * Get a team template
     *
     * @param  string $wiki The wiki you want data from.  **Example:** &#x60;dota2&#x60; (required)
     * @param  string $template The template name of the team template you want to get.  **Example:** &#x60;teamliquid&#x60; (required)
     * @param  string $date Liquipedia supports historical logos, but will require the date to show them.  **Example:** &#x60;2009-06-05&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['teamtemplateGet'] to see the possible values for this operation
     *
     * @throws \Liquipedia\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Liquipedia\Client\Model\BroadcastersGet200Response|\Liquipedia\Client\Model\Error|\Liquipedia\Client\Model\Error|\Liquipedia\Client\Model\Error
     */
    public function teamtemplateGet($wiki, $template, $date = null, string $contentType = self::contentTypes['teamtemplateGet'][0])
    {
        list($response) = $this->teamtemplateGetWithHttpInfo($wiki, $template, $date, $contentType);
        return $response;
    }

    /**
     * Operation teamtemplateGetWithHttpInfo
     *
     * Get a team template
     *
     * @param  string $wiki The wiki you want data from.  **Example:** &#x60;dota2&#x60; (required)
     * @param  string $template The template name of the team template you want to get.  **Example:** &#x60;teamliquid&#x60; (required)
     * @param  string $date Liquipedia supports historical logos, but will require the date to show them.  **Example:** &#x60;2009-06-05&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['teamtemplateGet'] to see the possible values for this operation
     *
     * @throws \Liquipedia\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Liquipedia\Client\Model\BroadcastersGet200Response|\Liquipedia\Client\Model\Error|\Liquipedia\Client\Model\Error|\Liquipedia\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function teamtemplateGetWithHttpInfo($wiki, $template, $date = null, string $contentType = self::contentTypes['teamtemplateGet'][0])
    {
        $request = $this->teamtemplateGetRequest($wiki, $template, $date, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Liquipedia\Client\Model\BroadcastersGet200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Liquipedia\Client\Model\BroadcastersGet200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Liquipedia\Client\Model\BroadcastersGet200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Liquipedia\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Liquipedia\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Liquipedia\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Liquipedia\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Liquipedia\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Liquipedia\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Liquipedia\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Liquipedia\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Liquipedia\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Liquipedia\Client\Model\BroadcastersGet200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Liquipedia\Client\Model\BroadcastersGet200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Liquipedia\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Liquipedia\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Liquipedia\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation teamtemplateGetAsync
     *
     * Get a team template
     *
     * @param  string $wiki The wiki you want data from.  **Example:** &#x60;dota2&#x60; (required)
     * @param  string $template The template name of the team template you want to get.  **Example:** &#x60;teamliquid&#x60; (required)
     * @param  string $date Liquipedia supports historical logos, but will require the date to show them.  **Example:** &#x60;2009-06-05&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['teamtemplateGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function teamtemplateGetAsync($wiki, $template, $date = null, string $contentType = self::contentTypes['teamtemplateGet'][0])
    {
        return $this->teamtemplateGetAsyncWithHttpInfo($wiki, $template, $date, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation teamtemplateGetAsyncWithHttpInfo
     *
     * Get a team template
     *
     * @param  string $wiki The wiki you want data from.  **Example:** &#x60;dota2&#x60; (required)
     * @param  string $template The template name of the team template you want to get.  **Example:** &#x60;teamliquid&#x60; (required)
     * @param  string $date Liquipedia supports historical logos, but will require the date to show them.  **Example:** &#x60;2009-06-05&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['teamtemplateGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function teamtemplateGetAsyncWithHttpInfo($wiki, $template, $date = null, string $contentType = self::contentTypes['teamtemplateGet'][0])
    {
        $returnType = '\Liquipedia\Client\Model\BroadcastersGet200Response';
        $request = $this->teamtemplateGetRequest($wiki, $template, $date, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'teamtemplateGet'
     *
     * @param  string $wiki The wiki you want data from.  **Example:** &#x60;dota2&#x60; (required)
     * @param  string $template The template name of the team template you want to get.  **Example:** &#x60;teamliquid&#x60; (required)
     * @param  string $date Liquipedia supports historical logos, but will require the date to show them.  **Example:** &#x60;2009-06-05&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['teamtemplateGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function teamtemplateGetRequest($wiki, $template, $date = null, string $contentType = self::contentTypes['teamtemplateGet'][0])
    {

        // verify the required parameter 'wiki' is set
        if ($wiki === null || (is_array($wiki) && count($wiki) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $wiki when calling teamtemplateGet'
            );
        }

        // verify the required parameter 'template' is set
        if ($template === null || (is_array($template) && count($template) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $template when calling teamtemplateGet'
            );
        }



        $resourcePath = '/teamtemplate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $wiki,
            'wiki', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $template,
            'template', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date,
            'date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('authorization');
        if ($apiKey !== null) {
            $headers['authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation teamtemplatelistGet
     *
     * Get a list of team templates
     *
     * @param  string $wiki The wiki you want data from.  **Example:** &#x60;dota2&#x60; (required)
     * @param  int $pagination .  **Example:** &#x60;1&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['teamtemplatelistGet'] to see the possible values for this operation
     *
     * @throws \Liquipedia\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Liquipedia\Client\Model\BroadcastersGet200Response|\Liquipedia\Client\Model\Error|\Liquipedia\Client\Model\Error|\Liquipedia\Client\Model\Error
     */
    public function teamtemplatelistGet($wiki, $pagination = null, string $contentType = self::contentTypes['teamtemplatelistGet'][0])
    {
        list($response) = $this->teamtemplatelistGetWithHttpInfo($wiki, $pagination, $contentType);
        return $response;
    }

    /**
     * Operation teamtemplatelistGetWithHttpInfo
     *
     * Get a list of team templates
     *
     * @param  string $wiki The wiki you want data from.  **Example:** &#x60;dota2&#x60; (required)
     * @param  int $pagination .  **Example:** &#x60;1&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['teamtemplatelistGet'] to see the possible values for this operation
     *
     * @throws \Liquipedia\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Liquipedia\Client\Model\BroadcastersGet200Response|\Liquipedia\Client\Model\Error|\Liquipedia\Client\Model\Error|\Liquipedia\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function teamtemplatelistGetWithHttpInfo($wiki, $pagination = null, string $contentType = self::contentTypes['teamtemplatelistGet'][0])
    {
        $request = $this->teamtemplatelistGetRequest($wiki, $pagination, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Liquipedia\Client\Model\BroadcastersGet200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Liquipedia\Client\Model\BroadcastersGet200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Liquipedia\Client\Model\BroadcastersGet200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Liquipedia\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Liquipedia\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Liquipedia\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Liquipedia\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Liquipedia\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Liquipedia\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Liquipedia\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Liquipedia\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Liquipedia\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Liquipedia\Client\Model\BroadcastersGet200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Liquipedia\Client\Model\BroadcastersGet200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Liquipedia\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Liquipedia\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Liquipedia\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation teamtemplatelistGetAsync
     *
     * Get a list of team templates
     *
     * @param  string $wiki The wiki you want data from.  **Example:** &#x60;dota2&#x60; (required)
     * @param  int $pagination .  **Example:** &#x60;1&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['teamtemplatelistGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function teamtemplatelistGetAsync($wiki, $pagination = null, string $contentType = self::contentTypes['teamtemplatelistGet'][0])
    {
        return $this->teamtemplatelistGetAsyncWithHttpInfo($wiki, $pagination, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation teamtemplatelistGetAsyncWithHttpInfo
     *
     * Get a list of team templates
     *
     * @param  string $wiki The wiki you want data from.  **Example:** &#x60;dota2&#x60; (required)
     * @param  int $pagination .  **Example:** &#x60;1&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['teamtemplatelistGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function teamtemplatelistGetAsyncWithHttpInfo($wiki, $pagination = null, string $contentType = self::contentTypes['teamtemplatelistGet'][0])
    {
        $returnType = '\Liquipedia\Client\Model\BroadcastersGet200Response';
        $request = $this->teamtemplatelistGetRequest($wiki, $pagination, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'teamtemplatelistGet'
     *
     * @param  string $wiki The wiki you want data from.  **Example:** &#x60;dota2&#x60; (required)
     * @param  int $pagination .  **Example:** &#x60;1&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['teamtemplatelistGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function teamtemplatelistGetRequest($wiki, $pagination = null, string $contentType = self::contentTypes['teamtemplatelistGet'][0])
    {

        // verify the required parameter 'wiki' is set
        if ($wiki === null || (is_array($wiki) && count($wiki) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $wiki when calling teamtemplatelistGet'
            );
        }



        $resourcePath = '/teamtemplatelist';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $wiki,
            'wiki', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $pagination,
            'pagination', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('authorization');
        if ($apiKey !== null) {
            $headers['authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation tournamentGet
     *
     * Get tournaments
     *
     * @param  string $wiki The wikis you want data from. Pipe-separate multiple wikis for multiwiki requests.  **Example:** &#x60;dota2&#x60;, &#x60;dota2|counterstrike&#x60; (required)
     * @param  string $conditions The filters you want to apply to the request.  **Example:** &#x60;[[pagename::Some/Liquipedia/Page]] AND [[namespace::0]]&#x60; (optional)
     * @param  string $query The datapoints you want to query.  **Example:** &#x60;pagename, pageid, namespace&#x60; (optional)
     * @param  int $limit The amount of results you want.  **Example:** &#x60;20&#x60; (optional)
     * @param  int $offset This can be used for pagination.  **Example:** &#x60;20&#x60; (optional)
     * @param  string $order The order you want your result in.  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $groupby What you want your results grouped by (this can be helpful when using aggregate functions).  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['tournamentGet'] to see the possible values for this operation
     *
     * @throws \Liquipedia\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Liquipedia\Client\Model\BroadcastersGet200Response|\Liquipedia\Client\Model\Error|\Liquipedia\Client\Model\Error|\Liquipedia\Client\Model\Error
     */
    public function tournamentGet($wiki, $conditions = null, $query = null, $limit = null, $offset = null, $order = null, $groupby = null, string $contentType = self::contentTypes['tournamentGet'][0])
    {
        list($response) = $this->tournamentGetWithHttpInfo($wiki, $conditions, $query, $limit, $offset, $order, $groupby, $contentType);
        return $response;
    }

    /**
     * Operation tournamentGetWithHttpInfo
     *
     * Get tournaments
     *
     * @param  string $wiki The wikis you want data from. Pipe-separate multiple wikis for multiwiki requests.  **Example:** &#x60;dota2&#x60;, &#x60;dota2|counterstrike&#x60; (required)
     * @param  string $conditions The filters you want to apply to the request.  **Example:** &#x60;[[pagename::Some/Liquipedia/Page]] AND [[namespace::0]]&#x60; (optional)
     * @param  string $query The datapoints you want to query.  **Example:** &#x60;pagename, pageid, namespace&#x60; (optional)
     * @param  int $limit The amount of results you want.  **Example:** &#x60;20&#x60; (optional)
     * @param  int $offset This can be used for pagination.  **Example:** &#x60;20&#x60; (optional)
     * @param  string $order The order you want your result in.  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $groupby What you want your results grouped by (this can be helpful when using aggregate functions).  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['tournamentGet'] to see the possible values for this operation
     *
     * @throws \Liquipedia\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Liquipedia\Client\Model\BroadcastersGet200Response|\Liquipedia\Client\Model\Error|\Liquipedia\Client\Model\Error|\Liquipedia\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function tournamentGetWithHttpInfo($wiki, $conditions = null, $query = null, $limit = null, $offset = null, $order = null, $groupby = null, string $contentType = self::contentTypes['tournamentGet'][0])
    {
        $request = $this->tournamentGetRequest($wiki, $conditions, $query, $limit, $offset, $order, $groupby, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Liquipedia\Client\Model\BroadcastersGet200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Liquipedia\Client\Model\BroadcastersGet200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Liquipedia\Client\Model\BroadcastersGet200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Liquipedia\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Liquipedia\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Liquipedia\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Liquipedia\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Liquipedia\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Liquipedia\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Liquipedia\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Liquipedia\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Liquipedia\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Liquipedia\Client\Model\BroadcastersGet200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Liquipedia\Client\Model\BroadcastersGet200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Liquipedia\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Liquipedia\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Liquipedia\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation tournamentGetAsync
     *
     * Get tournaments
     *
     * @param  string $wiki The wikis you want data from. Pipe-separate multiple wikis for multiwiki requests.  **Example:** &#x60;dota2&#x60;, &#x60;dota2|counterstrike&#x60; (required)
     * @param  string $conditions The filters you want to apply to the request.  **Example:** &#x60;[[pagename::Some/Liquipedia/Page]] AND [[namespace::0]]&#x60; (optional)
     * @param  string $query The datapoints you want to query.  **Example:** &#x60;pagename, pageid, namespace&#x60; (optional)
     * @param  int $limit The amount of results you want.  **Example:** &#x60;20&#x60; (optional)
     * @param  int $offset This can be used for pagination.  **Example:** &#x60;20&#x60; (optional)
     * @param  string $order The order you want your result in.  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $groupby What you want your results grouped by (this can be helpful when using aggregate functions).  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['tournamentGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tournamentGetAsync($wiki, $conditions = null, $query = null, $limit = null, $offset = null, $order = null, $groupby = null, string $contentType = self::contentTypes['tournamentGet'][0])
    {
        return $this->tournamentGetAsyncWithHttpInfo($wiki, $conditions, $query, $limit, $offset, $order, $groupby, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation tournamentGetAsyncWithHttpInfo
     *
     * Get tournaments
     *
     * @param  string $wiki The wikis you want data from. Pipe-separate multiple wikis for multiwiki requests.  **Example:** &#x60;dota2&#x60;, &#x60;dota2|counterstrike&#x60; (required)
     * @param  string $conditions The filters you want to apply to the request.  **Example:** &#x60;[[pagename::Some/Liquipedia/Page]] AND [[namespace::0]]&#x60; (optional)
     * @param  string $query The datapoints you want to query.  **Example:** &#x60;pagename, pageid, namespace&#x60; (optional)
     * @param  int $limit The amount of results you want.  **Example:** &#x60;20&#x60; (optional)
     * @param  int $offset This can be used for pagination.  **Example:** &#x60;20&#x60; (optional)
     * @param  string $order The order you want your result in.  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $groupby What you want your results grouped by (this can be helpful when using aggregate functions).  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['tournamentGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tournamentGetAsyncWithHttpInfo($wiki, $conditions = null, $query = null, $limit = null, $offset = null, $order = null, $groupby = null, string $contentType = self::contentTypes['tournamentGet'][0])
    {
        $returnType = '\Liquipedia\Client\Model\BroadcastersGet200Response';
        $request = $this->tournamentGetRequest($wiki, $conditions, $query, $limit, $offset, $order, $groupby, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'tournamentGet'
     *
     * @param  string $wiki The wikis you want data from. Pipe-separate multiple wikis for multiwiki requests.  **Example:** &#x60;dota2&#x60;, &#x60;dota2|counterstrike&#x60; (required)
     * @param  string $conditions The filters you want to apply to the request.  **Example:** &#x60;[[pagename::Some/Liquipedia/Page]] AND [[namespace::0]]&#x60; (optional)
     * @param  string $query The datapoints you want to query.  **Example:** &#x60;pagename, pageid, namespace&#x60; (optional)
     * @param  int $limit The amount of results you want.  **Example:** &#x60;20&#x60; (optional)
     * @param  int $offset This can be used for pagination.  **Example:** &#x60;20&#x60; (optional)
     * @param  string $order The order you want your result in.  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $groupby What you want your results grouped by (this can be helpful when using aggregate functions).  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['tournamentGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function tournamentGetRequest($wiki, $conditions = null, $query = null, $limit = null, $offset = null, $order = null, $groupby = null, string $contentType = self::contentTypes['tournamentGet'][0])
    {

        // verify the required parameter 'wiki' is set
        if ($wiki === null || (is_array($wiki) && count($wiki) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $wiki when calling tournamentGet'
            );
        }








        $resourcePath = '/tournament';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $wiki,
            'wiki', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $conditions,
            'conditions', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $query,
            'query', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order,
            'order', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $groupby,
            'groupby', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('authorization');
        if ($apiKey !== null) {
            $headers['authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation transferGet
     *
     * Get transfers
     *
     * @param  string $wiki The wikis you want data from. Pipe-separate multiple wikis for multiwiki requests.  **Example:** &#x60;dota2&#x60;, &#x60;dota2|counterstrike&#x60; (required)
     * @param  string $conditions The filters you want to apply to the request.  **Example:** &#x60;[[pagename::Some/Liquipedia/Page]] AND [[namespace::0]]&#x60; (optional)
     * @param  string $query The datapoints you want to query.  **Example:** &#x60;pagename, pageid, namespace&#x60; (optional)
     * @param  int $limit The amount of results you want.  **Example:** &#x60;20&#x60; (optional)
     * @param  int $offset This can be used for pagination.  **Example:** &#x60;20&#x60; (optional)
     * @param  string $order The order you want your result in.  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $groupby What you want your results grouped by (this can be helpful when using aggregate functions).  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transferGet'] to see the possible values for this operation
     *
     * @throws \Liquipedia\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Liquipedia\Client\Model\BroadcastersGet200Response|\Liquipedia\Client\Model\Error|\Liquipedia\Client\Model\Error|\Liquipedia\Client\Model\Error
     */
    public function transferGet($wiki, $conditions = null, $query = null, $limit = null, $offset = null, $order = null, $groupby = null, string $contentType = self::contentTypes['transferGet'][0])
    {
        list($response) = $this->transferGetWithHttpInfo($wiki, $conditions, $query, $limit, $offset, $order, $groupby, $contentType);
        return $response;
    }

    /**
     * Operation transferGetWithHttpInfo
     *
     * Get transfers
     *
     * @param  string $wiki The wikis you want data from. Pipe-separate multiple wikis for multiwiki requests.  **Example:** &#x60;dota2&#x60;, &#x60;dota2|counterstrike&#x60; (required)
     * @param  string $conditions The filters you want to apply to the request.  **Example:** &#x60;[[pagename::Some/Liquipedia/Page]] AND [[namespace::0]]&#x60; (optional)
     * @param  string $query The datapoints you want to query.  **Example:** &#x60;pagename, pageid, namespace&#x60; (optional)
     * @param  int $limit The amount of results you want.  **Example:** &#x60;20&#x60; (optional)
     * @param  int $offset This can be used for pagination.  **Example:** &#x60;20&#x60; (optional)
     * @param  string $order The order you want your result in.  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $groupby What you want your results grouped by (this can be helpful when using aggregate functions).  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transferGet'] to see the possible values for this operation
     *
     * @throws \Liquipedia\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Liquipedia\Client\Model\BroadcastersGet200Response|\Liquipedia\Client\Model\Error|\Liquipedia\Client\Model\Error|\Liquipedia\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function transferGetWithHttpInfo($wiki, $conditions = null, $query = null, $limit = null, $offset = null, $order = null, $groupby = null, string $contentType = self::contentTypes['transferGet'][0])
    {
        $request = $this->transferGetRequest($wiki, $conditions, $query, $limit, $offset, $order, $groupby, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Liquipedia\Client\Model\BroadcastersGet200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Liquipedia\Client\Model\BroadcastersGet200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Liquipedia\Client\Model\BroadcastersGet200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Liquipedia\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Liquipedia\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Liquipedia\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Liquipedia\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Liquipedia\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Liquipedia\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Liquipedia\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Liquipedia\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Liquipedia\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Liquipedia\Client\Model\BroadcastersGet200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Liquipedia\Client\Model\BroadcastersGet200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Liquipedia\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Liquipedia\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Liquipedia\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation transferGetAsync
     *
     * Get transfers
     *
     * @param  string $wiki The wikis you want data from. Pipe-separate multiple wikis for multiwiki requests.  **Example:** &#x60;dota2&#x60;, &#x60;dota2|counterstrike&#x60; (required)
     * @param  string $conditions The filters you want to apply to the request.  **Example:** &#x60;[[pagename::Some/Liquipedia/Page]] AND [[namespace::0]]&#x60; (optional)
     * @param  string $query The datapoints you want to query.  **Example:** &#x60;pagename, pageid, namespace&#x60; (optional)
     * @param  int $limit The amount of results you want.  **Example:** &#x60;20&#x60; (optional)
     * @param  int $offset This can be used for pagination.  **Example:** &#x60;20&#x60; (optional)
     * @param  string $order The order you want your result in.  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $groupby What you want your results grouped by (this can be helpful when using aggregate functions).  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transferGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transferGetAsync($wiki, $conditions = null, $query = null, $limit = null, $offset = null, $order = null, $groupby = null, string $contentType = self::contentTypes['transferGet'][0])
    {
        return $this->transferGetAsyncWithHttpInfo($wiki, $conditions, $query, $limit, $offset, $order, $groupby, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation transferGetAsyncWithHttpInfo
     *
     * Get transfers
     *
     * @param  string $wiki The wikis you want data from. Pipe-separate multiple wikis for multiwiki requests.  **Example:** &#x60;dota2&#x60;, &#x60;dota2|counterstrike&#x60; (required)
     * @param  string $conditions The filters you want to apply to the request.  **Example:** &#x60;[[pagename::Some/Liquipedia/Page]] AND [[namespace::0]]&#x60; (optional)
     * @param  string $query The datapoints you want to query.  **Example:** &#x60;pagename, pageid, namespace&#x60; (optional)
     * @param  int $limit The amount of results you want.  **Example:** &#x60;20&#x60; (optional)
     * @param  int $offset This can be used for pagination.  **Example:** &#x60;20&#x60; (optional)
     * @param  string $order The order you want your result in.  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $groupby What you want your results grouped by (this can be helpful when using aggregate functions).  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transferGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transferGetAsyncWithHttpInfo($wiki, $conditions = null, $query = null, $limit = null, $offset = null, $order = null, $groupby = null, string $contentType = self::contentTypes['transferGet'][0])
    {
        $returnType = '\Liquipedia\Client\Model\BroadcastersGet200Response';
        $request = $this->transferGetRequest($wiki, $conditions, $query, $limit, $offset, $order, $groupby, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'transferGet'
     *
     * @param  string $wiki The wikis you want data from. Pipe-separate multiple wikis for multiwiki requests.  **Example:** &#x60;dota2&#x60;, &#x60;dota2|counterstrike&#x60; (required)
     * @param  string $conditions The filters you want to apply to the request.  **Example:** &#x60;[[pagename::Some/Liquipedia/Page]] AND [[namespace::0]]&#x60; (optional)
     * @param  string $query The datapoints you want to query.  **Example:** &#x60;pagename, pageid, namespace&#x60; (optional)
     * @param  int $limit The amount of results you want.  **Example:** &#x60;20&#x60; (optional)
     * @param  int $offset This can be used for pagination.  **Example:** &#x60;20&#x60; (optional)
     * @param  string $order The order you want your result in.  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $groupby What you want your results grouped by (this can be helpful when using aggregate functions).  **Example:** &#x60;pagename ASC&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transferGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function transferGetRequest($wiki, $conditions = null, $query = null, $limit = null, $offset = null, $order = null, $groupby = null, string $contentType = self::contentTypes['transferGet'][0])
    {

        // verify the required parameter 'wiki' is set
        if ($wiki === null || (is_array($wiki) && count($wiki) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $wiki when calling transferGet'
            );
        }








        $resourcePath = '/transfer';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $wiki,
            'wiki', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $conditions,
            'conditions', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $query,
            'query', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order,
            'order', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $groupby,
            'groupby', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('authorization');
        if ($apiKey !== null) {
            $headers['authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
